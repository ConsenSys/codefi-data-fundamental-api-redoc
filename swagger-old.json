{
  "openapi": "3.0.0",
  "servers": [
    {
      "url": "https://api.aleth.io/v1"
    }
  ],
  "info": {
    "title": "Alethio API",
    "version": "1.5.5",
    "contact": {
      "email": "support@aleth.io",
      "name": "API Support"
    },
    "license": {
      "name": "Alethio API Terms of Service",
      "url": "https://developers.aleth.io/terms"
    },
    "description": "# Introduction\n\nBlockchains store data in ways most apps find difficult to access. Alethio's API gives you a robust and reliable way to query synthesized, indexed Ethereum data in real-time via a [JSON:API](https://jsonapi.org/) compliant REST interface.\n\nWe designed the endpoints around the frequent needs and pain points of building an Ethereum-powered project. We give you access to the data you need, exactly how you need it - through a comprehensive, general-purpose data model based on [EthOn](https://ethon.consensys.net/) with meaningful aggregation and filtering capabilities exposed via query parameters.\n\nHere are only a few examples that illustrate the power of the API - these use cases are typically not supported by the standard Ethereum `json-rpc` interface:\n\n- Retrieve the [transaction history](#tag/Accounts/paths/~1accounts~1{address}~1transactions/get) of any Ethereum account \n\n- Retrieve a complete list of incoming and outgoing [Ether transfers](#tag/Ether-Transfers) for any account - including transfers sent by smart contracts\n\n- Retrieve the [token transfer](#tag/Token-Transfers) history for any account\n\n- Retrieve a full map of [contract messages](#tag/Contract-Messages) (internal transactions) for any account and smart contract\n\n- Efficiently filter through the entire history of [event logs](#tag/Log-Entries) emmitted by any smart contract\n\n\n## Networks\n\nThe API is currently live on the following networks:\n\nNetwork  | Base URL\n-------- | ---------\nEthereum Mainnet | `https://api.aleth.io/v1`\n\n\n## Authentication\n\nThe API can be tested without authentication on low volumes. Unauthenticated access is throttled at `~60 req/min` per IP address with a HTTP `429` response code.\n\nFor higher throughput and volumes, please register an account with [Alethio's Developer Portal](https://developers.aleth.io/) and use the provided API Key in one of the following supported authentication mechanisms:\n\n- Bearer Token via an `Authorization: Bearer API_KEY` header\n\n```bash\n$ curl https://api.aleth.io/v1/blocks/latest \\\n  -H \"Authorization: Bearer sk_main_0123456789abcdef\"\n```\n\n- [HTTP Basic Access Authentication](https://en.wikipedia.org/wiki/Basic_access_authentication): use your API key as the user name (no password)\n\n```bash\n$ curl https://api.aleth.io/v1/blocks/latest \\\n  -u sk_main_0123456789abcdef:\n# The colon prevents curl from asking for a password\n```\n\n## Response format\n\nAll API responses are serialized as JSON objects and follow the conventions of the [JSON:API specificaton](https://jsonapi.org/):\n\n- If the response object has a `data` property, the request was successful and the value of the `data` property can be either a single object (representing a Resource) or an array of objects (representing a Collection).\n\n- Otherwise, the response object will have a single `errors` property, whose value is an array of *Error objects*.\n\n### The `meta` object\n\nAll succesful responses include a `meta` property along with the `data` property in the response object. The `meta` object includes helper information that can vary depending on the type of request and will be described along with the relevant functionality (e.g. the sections on Pagination and Reorg Handling).\n\nFor all API responses, however, the `meta` object includes a few details about the latest block of the canonical chain, as it is seen by the API at the time of the request. This can serve as an anchor for queries that ask for the most recent items of a collection (e.g. latest transactions for an account), as it defines what 'most recent' means to the API at the time of the request:\n\n```json\n{\n  \"meta\": {\n    \"latestBlock\": {\n      \"number\": 4242424,\n      \"blockCreationTime\": 1504648858,\n      \"blockHash\": \"0x30b65c7412e887eb888abadb230171e7dc09da7bbe0f2a475c0feeed6950dc3b\"\n    }\n  }\n}\n```\n\n## Resources\n\nThe API is organized around the concepts of *Resources* and *Collections*.\n\nA *Resource* typically represents a single blockchain-related concept (e.g. `Block`, `Transaction`, `Account`, etc.) whereas a *Collection* is a group (array) of resources sharing the same type.\n\nEach resource is uniquely dentified by its `type` and `id`. We will refer to this as the *resource identifier data*.\n\nLet's take Ethereum's genesis block as an example:\n\n```bash\ncurl \"https://api.aleth.io/v1/blocks/genesis\"\n```\n\nYou will find the *identifier data* as part of the resource payload:\n\n```json\n{\n  \"type\": \"Block\",\n  \"id\": \"0xd4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3\"\n  // ...\n}\n```\n\nAlong with the *identifier data*, all resources have two other types of properties:\n\n- *attributes* are static values specific to the resource\n\n- *relationships* are pointers to other (related) resources or collections\n\nFor example, the genesis block has:\n\n```json\n{\n  \"attributes\": {\n    \"number\": 0,\n    \"blockCreationTime\": 1438226773\n    // ... other attibutes\n  },\n  \"relationships\": {\n    \"hasBeneficiary\": {\n      // pointer to the miner's Account\n    },\n    \"transactions\": {\n      // pointer to the collection of Transactions\n    }\n  }\n}\n```\n\n## Relationships and Links\n\nAll the blockchain resources are part a large graph of interconnected concepts. The API is translating these connections into resource *relationships*. There are two types of relationships:\n\n- A *to-one* relationship is a link to a single other resource (e.g. there's a single `from` Account for any Transaction).\n\n- A *to-many* relationship is a link to a collection of resources sharing the same type (e.g. there is a collection of Transactions for any given Block).\n\nBoth the *to-one* and *to-many* relationships are represented by a fully-formed URL called the *related link*. According to the [JSON:API specificaton](https://jsonapi.org/) this will be serialized as:\n\n```json\n{\n  \"transactions\": {\n    \"links\": {\n      \"related\": \"https://api.aleth.io/v1/blocks/genesis/transactions\"\n    }\n  }\n}\n```\n\nAdditionally, only the *to-one* relationships will include in the response, along with the link, the *identifier data* of the related resource:\n\n```json\n{\n  \"hasBeneficiary\": {\n    \"data\": {\n      \"type\": \"Account\",\n      \"id\": \"0x0000000000000000000000000000000000000000\"\n    },\n    \"links\": {\n      \"related\": \"https://api.aleth.io/v1/blocks/genesis/hasBeneficiary\"\n    }\n  }\n}\n```\n\n> **Note:** In practice, the related links will be normalized to include the canonical identifier of the origin.\n> Instead of `/blocks/genesis/...` (we used this in the examples above for brevity) the related links will read `/blocks/0xd4e56740.../...`.\n\n## Multi-Resource Queries\n\nSometimes it's helpful to fetch a bundle of related resources with a single API request. The API enables you to do this via the `include` URL parameter.\nYou can choose to include any subset of *to-one* relationships by providing a comma-separated list of the relationship names in the request.\n\nLet's explore the first Ethereum transaction, along with the details of its `from` and `to` Accounts:\n\n```bash\ncurl \"https://api.aleth.io/v1/transactions/0x5c504ed432cb51138bcf09aa5e8a410dd4a1e204ef84bfed1be16dfba1b22060?include=from,to\"\n```\n\nNote the trailing `include=from,to` argument in the URL. This asks the API to append the related resources to the response, grouped under the `included` key:\n\n```json\n{\n  \"data\": {\n    \"type\": \"Transaction\",\n    \"id\": \"0x5c504ed432cb51138bcf09aa5e8a410dd4a1e204ef84bfed1be16dfba1b22060\",\n    \"relationships\": {\n      \"from\": {\n        \"data\": {\"type\": \"Account\", \"id\": \"0xa1e4380a3b1f749673e270229993ee55f35663b4\"}\n        // \"links\" not relevant for this example\n      },\n      \"to\": {\n        \"data\": {\"type\": \"Account\", \"id\": \"0x5df9b87991262f6ba471f09758cde1c0fc1de734\"}\n        // \"links\" not relevant for this example\n      }\n    }\n    // ... other Transaction details\n  },\n  \"included\": [\n    {\n      \"type\": \"Account\",\n      \"id\": \"0xa1e4380a3b1f749673e270229993ee55f35663b4\",\n      // ... other Account details\n    },\n    {\n      \"type\": \"Account\",\n      \"id\": \"0x5df9b87991262f6ba471f09758cde1c0fc1de734\",\n      // ... other Account details\n    }\n  ]\n}\n```\n\nAn included resource will be appended to the `included` array one time, even if it's referenced by more than one relationship (e.g. if the `from` and the `to` Accounts would have been identical in the example above, that Account wouldn't be included twice in the array).\n\n> **Note:** Only the *to-one* relationships can be multiplexed in a single request. All *to-many* relationships need to be queried explicitly in separate requests. We chose this approach so we could simplify the API query logic for collection pagination and filtering.\n\n## Collection ordering\n\nThe default sorting order for all resources that directly relate to activity on a timeline (e.g. Blocks, Transactions, ContractMessages, LogEntries) is *reverse chronological* (most recent entries are first on the list). We chose this approach as most often than not, users are interested primarily in events or transactions that happened recently, rather than the ones that happened a long time ago.\n\nThe `globalRank` attribute, where present, serves as an aid to this ordering criteria, as it aggregates a hierarchy of indexes into a single composite value:\n\n- The block number\n\n- The index of a message (transaction or contract message) in the context of a block\n\n- The index of an event in the context of a transaction\n\nThis value allows you to sort heterogeneous collections of items chronologically, according to the relative order in which they were executed.\n\n## Filters\n\nFilters can assist you in refining your queries and distilling the data sets down to resources that have certain properties (attributes or relationships).\nAs a general rule, the filters are applied through the `filter[NAME]` URL argument. Multiple filters can be chained within a single request, as long as they're targeting different properties.\n\n**Example:** Let's query the list of transactions between two specific accounts:\n\n```bash\ncurl \"https://api.aleth.io/v1/transactions?filter[from]=0x5A0b54D5dc17e0AadC383d2db43B0a0D3E029c4c&filter[to]=0x962f7a7146ca5527fb9bf92491da675f3d2de0d8\"\n```\n\n> **Note:** All collections of the same resource type have support for the same filtering parameters.\n\nYou will find a full list of supported filters for each collection type in the endpoint reference below. Please note that all filters are only listed once for each collection type, although they can be applied on related collections as well.\n\n**Examples:**\n\n1. `filter[token]` is documented for the [root collection](#tag/Token-Transfers/paths/~1token-transfers?filter[token]={address}/get) `/token-transfers`, but can be applied to an [Account's token transfers](#tag/Accounts/paths/~1accounts~1{address}~1tokenTransfers/get) as well, for retrieving the list of [TokenTransfers](#tag/Token-Transfers) related to that [Account](#tag/Accounts), in a given [Token](#tag/Tokens):\n\n   ```bash\n   curl \"https://api.aleth.io/v1/accounts/0xd6f480e6e7d75346e254db5d99efa2561d3f3288/tokenTransfers?filter[token]=0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\"\n   ```\n\n2. Here's how you can apply the [LogEntry topic filter](#tag/Log-Entries/paths/~1log-entries?filter[hasLogTopics.0]={value}/get) `filter[hasLogTopics.0]` to retrieve all ERC20 `Approve` events triggered a given block:\n\n   ```bash\n   curl \"https://api.aleth.io/v1/blocks/8048150/logEntries?filter[hasLogTopics.0]=0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\"\n   ```\n\n\n## Pagination\n\nAll resource collections that are exported by the API share a uniform pagination strategy.\n\n- The maximum number of items on a page is controlled by the `page[limit]` URL argument. The default value is `10` and the maximum allowed value is `100`.\n\n- The beginning or end of the requested page is controlled by a `cursor` value assigned to either the `page[next]` or `page[prev]` URL arguments. Each resource has an immutable `cursor` attribute that can be used for this purpose.\n\n> **Note:** All the resources that are subject to pagination have a *reverse chronological* default ordering. This can make the pagination language counter-intuitive, unless you think of the items as being part of an 'activity feed' (with the most recent activity shown on the top of the list). Thus, the first (default) page will always start with the most recent items and progress towards older items. The `next` page will display *older* items than the current page, whereas the `prev` page will display *more recent* items.\n\n- The `page[next]=cursor` argument requests the next page starting immediately after `cursor`\n\n- The `page[prev]=cursor` argument requests the previous page ending immediately before `cursor`\n\n![Pages relative to a cursor](/pag-1.svg \"Pages relative to a cursor\")\n\nThe API automatically creates links for the `next` and `prev` pages relative to the set of items included in the active (current) page, and appends these links to the response under the `links` property.\n\nLet's look into the transactions of Block number `4242424`:\n\n```bash\ncurl \"https://api.aleth.io/v1/blocks/4242424/transactions?page[limit]=2\"\n```\n\n```json\n{\n  \"data\": [\n    // List of 2 Transaction resources:\n    // - first with cursor 0x0040bbf800a60000100030b65c7412e8\n    // - second with cursor 0x0040bbf800a50000100030b65c7412e8\n  ],\n  \"links\": {\n    \"prev\": \"(...) transactions?page[limit]=2&page[prev]=0x0040bbf800a60000100030b65c7412e8\",\n    \"next\": \"(...) transactions?page[limit]=2&page[next]=0x0040bbf800a50000100030b65c7412e8\"\n  }\n}\n```\n\nNotice how `links.prev` and `links.next` were generated to include the cursors of the first and the last items in the current page.\n\n> **Note:** The values set for `page[limit]` (along with any other `filter[]` applied to the current page) will be preserved in the pagination links for the `next` and `prev` pages.\n\nFor all paginated collections, the `meta` object assigned to the response will include a `page` object that provides information about the items of the `next` and `prev` pages:\n\n- `meta.page.hasNext` is a boolean value that indicates whether the next page (starting immediately after the cursor of the last item in the current page) has at least one item.\n\n- `meta.page.hasPrev` is a boolean value that indicates whether the previous page (ending immediately before the cursor of the first item in the current page) has at least one item.\n\n\n## Reorg Handling\n\n### Data Latency\n\nOur data pipeline keeps track of the blockchain growth in real-time, so you get access to the most recent activity as soon as it takes place. We don't require you to wait for an arbitrary number of confirmations until you get access to the data, so you can build applications that react as quickly as possible to the on-chain events, with minimal delays for your users.\n\nThis is a powerful feature that introduces a subtle layer of complexity due to how distributed consensus works: the miners are competing for producing new blocks and sometimes the latest section of the chain becomes a stale branch because a better branch was produced by other nodes. This is also known as a \"chain reorg\".\n\n![Chain reorg](/reorg-1.svg \"Chain reorg\")\n\nIn the image above, the block segment `P1-P2` (that was part of the canonical chain) becomes a stale branch because a better chain was created via `M1-M2-M3`. After the reorg took place, any transaction that was included in `P1` or `P2` is no longer part of the main chain (hence no longer confirmed), unless it is mined again in one of the blocks that are now part of the main chain.\n\n### Rollbacks\n\nWe designed the API to handle these situations with minimal overhead for you. The pagination cursors are reorg-safe, so you can surf through resource collections or poll for updates without worrying about data inconsistencies related to reorgs. If we detect that a subset of the items that we've given you have become stale (because the chain reorganized in between requests), we'll simply append a list of `rollback` items to the next response, to notify you that the status of those items is no longer valid.\n\nIn other words, if the pagination cursor that you've just sent is pointing to an item that's no longer part of the main chain, the API will do the heavy lifting by shifting the cursor back into the main chain and returning a list of `rollback` items whose status you might want to update.\n\n### Under the Hood\n\nHere is a step-by-step explanation of how our data pipeline handles a pagination cursor that's pointing to a reorged block (`Pc`). This is purely informative and you don't need to understand it to successfully use the API, as most of this logic takes place in our backend.\n\n![Rollbacks based on a cursor](/reorg-2.svg \"Rollbacks based on a cursor\")\n\n- The API will determine `A`, the most recent common ancestor of `Pc` and the current tip of the main chain\n\n- Create a `meta.rollback` collection that includes all the relevant items on the stale branch (according to the active filters)\n\n- For `page[next]`: create a `data` collection that returns all the relevant items on the main chain (according to the active filters), whose block number is *less than or equal to* `A`\n\n- For `page[prev]`: same as above, but the block number needs to be *strictly greater than* `A`\n\nLet's take a more granular example:\n\n![Paginating reorged items](/reorg-3.svg \"Paginating reorged items\")\n\nAssume the active query asks for all transactions of a given account `X`.\n\nThe transactions matching the active query are highlighted in the image as lines inside blocks. Note that some blocks might not have any transactions related to the account `X`, so they are shown empty (no lines) in the image.\n\nThe cursor `C` points to a transaction that’s outside the main chain (block `Pc`).\n\nThe API will send a `meta.rollback` collection that includes all the transactions of `X` in the orange blocks.\n\n> **Important:** The `rollback` dataset won't include *all* transactions from all the orange blocks, but only the ones that match the active filters (in this example, only the transactions associated with the account `X`).\n\n> **Note:** The `rollback` dataset is not paginated, it will include all the relevant items in a single list of *resource identifier objects* (only the `type` and `id` is provided for each `rollback` item).\n\n- For `page[next]=C`, the API will send a `data` collection that includes the next `page[limit]` transactions matching the active filters, starting with (and including) block `A` (note that some blocks might not have any transactions for account `X`, in this example `A` and `M3` don’t have matching transactions).\n\n- The same applies for `page[prev]`, but with blocks higher than (and *not including*) `A`.\n\nHere is an abstracted example for the query `/accounts/X/transactions?page[limit]=3&page[next]=C` in the context of the diagram above:\n\n```json\n{\n  \"data\": [\n    {\n      \"type\": \"Transaction\",\n      \"id\": \"M5-tx1\",\n      // ... more Transaction details\n    },\n    {\n      \"type\": \"Transaction\",\n      \"id\": \"M4-tx1\",\n      // ... more Transaction details\n    },\n    {\n      \"type\": \"Transaction\",\n      \"id\": \"M2-tx1\",\n      // ... more Transaction details\n    }\n  ],\n  \"meta\": {\n    \"rollback\": [\n      // only the resource identifiers, no other details\n      { \"type\": \"Transaction\", \"id\": \"P6-tx1\" },\n      { \"type\": \"Transaction\", \"id\": \"P6-tx2\" },\n      { \"type\": \"Transaction\", \"id\": \"P4-tx1\" },\n      { \"type\": \"Transaction\", \"id\": \"R1-tx1\" },\n      { \"type\": \"Transaction\", \"id\": \"Pc-tx1\" },\n      { \"type\": \"Transaction\", \"id\": \"Pc-tx2\" },\n      { \"type\": \"Transaction\", \"id\": \"Pc-tx3\" },\n      { \"type\": \"Transaction\", \"id\": \"P1-tx1\" },\n      { \"type\": \"Transaction\", \"id\": \"P1-tx2\" }\n      // always includes the full list, no pagination\n    ]\n  }\n}\n```\n\n## Webhooks\n\n[Webhooks](#tag/Webhooks) allow users to monitor any given query for updates and receive real-time notifications\nwhen new resources that satisfy the query criteria become part of the blockchain.\n\n### Motivation\n\nLet's take the example of monitoring inbound and outbound DAI transfers for the `0x0` account.\n\nWe can use the `account` and `token` filters on the [token transfers endpoint](#tag/Token-Transfers/paths/~1token-transfers?filter[account]={address}/get)\nto retrieve a list of transfers, then periodically poll the `links.prev` link to retrieve fresh updates (the `prev` link\nasks for the *previous* page, which consists of more recent items than the first item in the current list).\n\n```bash\n$ curl \"https://api.aleth.io/v1/token-transfers?filter[account]=0x0000000000000000000000000000000000000000&filter[token]=0x6b175474e89094c44da98b954eedeac495271d0f\"\n```\n\n```json\n{\n  \"data\": [\n    {\n      \"type\": \"EtherTransfer\",\n      \"id\": \"0x008b40460130000041007687f464fcf6\",\n      \"attributes\": {\n        \"transferType\": \"TransactionTransfer\",\n        \"value\": \"0\",\n        \"fee\": \"261479290958400\",\n        \"total\": \"261479290958400\",\n        \"blockCreationTime\": 1576678602,\n        ...\n      }\n    },\n    ...\n  ],\n  \"links\": {\n    \"next\": \"https://api.aleth.io/v1/ether-transfers/0x0000000000000000000000000000000000000000/etherTransfers?filter%5Baccount%5D=0x0000000000000000000000000000000000000000\\u0026page%5Blimit%5D=1\\u0026page%5Bnext%5D=0x008b40460130000041007687f464fcf6\",\n    \"prev\": \"https://api.aleth.io/v1/accounts/0x0000000000000000000000000000000000000000/etherTransfers?filter%5Baccount%5D=0x0000000000000000000000000000000000000000\\u0026page%5Blimit%5D=1\\u0026page%5Bprev%5D=0x008b40460130000041007687f464fcf6\"\n  }\n}\n```\n\nThis approach is inconvenient, as it adds a certain delay (the polling interval) and creates many \nrequests that will result in empty responses.\n\nWith the new Webhooks system, users can register a Webhook instance that monitors a given query and sends\na HTTP POST request to a configurable target URL as soon as new resources that match the query have been\nincluded in the chain.\n\n### Webhook Behavior\n\nEach Webhook instance is associated with an underlying data *query* - expressed via the webhook's `endpoint`, \n`filters` and `confirmations` attributes. For the example above, the underlying query is\n\n```\nhttps://api.aleth.io/v1/token-transfers?filter[account]=0x0000000000000000000000000000000000000000&filter[token]=0x6b175474e89094c44da98b954eedeac495271d0f\n```\n\nand the corresponding webhook configuration is\n\n```json\n{\n  \"endpoint\": \"/token-transfers\",\n  \"filters\": {\n    \"account\": \"0x0000000000000000000000000000000000000000\",\n    \"token\": \"0x6b175474e89094c44da98b954eedeac495271d0f\"\n  }\n}\n```\n\nThe webhook will monitor the result set of this query and synchronize the results with the target\n(remote server) by keeping track of an internal `cursor` and pushing paginated results in two \ndistinct stages:\n\n- The **backfill** stage: starting with the earliest (oldest) entry in the dataset, pages of \nmaximum `100` items will be `POST`ed to the target URL.\n\n- The **live** stage: as soon as the entire history is synchronized, the webhook will hibernate \nuntil one (or potentially more) new items are included in the dataset as a result of a new block \nbeing appended to the chain. The webhook will then issue a `POST` request to the remote URL and \nsend the new items in the body of the request.\n\nThe payload of each HTTP POST issued to the target URL will include a list of resources\n(under the `data` property) and `meta` information about the Webhook:\n\n```json\n{\n  \"data\": [\n    {\n      \"type\": \"EtherTransfer\",\n      \"id\": \"0x008b40460130000041007687f464fcf6\",\n      \"attributes\": {...},\n      \"relationships\": {...}\n    },\n    ...\n  ],\n  \"meta\": {\n    \"webhook\": {\n      \"type\": \"Webhook\",\n      \"id\": \"006cfb85008d000010008ca21f438ee5\",\n      \"links\": {\n        \"self\": \"https://api.aleth.io/v1/webhooks/006cfb85008d000010008ca21f438ee5\"\n      }\n    }\n  }\n}\n```\n\n### Webhook Management\n\nAPI users can manage their own decicated Webhooks programatically using a separate set of \nendpoints detailed in the [Webhooks](#tag/Webhooks) section below.\n\n\n## Data Model\n\nThe follwing section provides a comprehensive list of all the API endpoints and their associated responses.\n\nThe Resource data model borrows a lot from [EthOn](https://ethon.consensys.net/) - the community-sourced Ethereum Ontology. You can use it as a secondary reference for the response schema.\n\n> **Note:** You can access a detailed view of each response (including descriptions of all the fields) by expanding the green pills underneath each endpoint (e.g. the expandable green area reading '200 Block').\n"
  },
  "tags": [
    {
      "name": "Blocks",
      "description": "A **Block** is the basic element of a 'blockchain'. It functions as an entry in a distributed ledger, recording a series of transactions together with a reference to the previous block. A block is chained to its preceeding block by a cryptographic hash of its contents as a means of reference. Blocks contain an identifier for the final state after all transactions contained in it are validated. There is a consensus mechanism that provides incentives for nodes adding new blocks to the chain (\"miners\" in the Proof of Work protocol used by the main Ethereum network) that comply with the rules of Ethereum by issuing newly generated tokens ('Ether') to an account specified by the block's author."
    },
    {
      "name": "Accounts",
      "description": "An **Account** is the superclass of all account types in Ethereum. All accounts are identified by an address (which, however, is derived differently for external and contract accounts) and an account state that contains the contract's balance and total message count, which is called its nonce. Contract accounts also have an associated storage state and EVM code. The address of an external account is derived from the public key of a public and private keypair, while a contract account address is a concatenation of the creator account's address and its nonce."
    },
    {
      "name": "Contracts",
      "description": "A **Contract** account is an account whose behaviour is controlled by a smart contract. Contract accounts are identified by their address which is derived from the creator account's address and nonce. A contract account has a non-empty associated EVM code. It's state data consists of the bytecode, the contract's balance and the storage state of the contract's code (for example the value of variables). A contract account can only act when it is triggered by a message. It may not create and sign transactions, but it can receive transactions from external accounts as well as send and receive contract messages, which may involve a transfer of Ether. Contract accounts can also contain events which create log entries when triggered."
    },
    {
      "name": "Transactions",
      "description": "A **Transaction** is a message between two accounts that may transfer Ether and may contain a payload. Transactions always originate from an external account that is controlled by an external actor by means of a private key. The execution of a transaction creates a 'transaction receipt'."
    },
    {
      "name": "Contract-Messages",
      "description": "A **Contract Message** is passed between a contract account and any other account (external or contract). It is the result of an execution chain originally triggered by an external eccount."
    },
    {
      "name": "Log-Entries",
      "description": "A **Log Entry** is the result of an event in a smart contract, emitted during creation or execution of a contract account's code. It is related to the Tx it was created in, the contract account that had the event, a series of 32-bytes log topics and a number of bytes of data."
    },
    {
      "name": "Ether-Transfers",
      "description": "An **Ether Transfer** is the record of an amount of Ether units (wei)\nbeing transferred from one account to another account. \n\nEther can be moved around between accounts through a variety of factors, such as:\n\n- [Transactions](#tag/Transactions) - transfers originating from an external account\n\n- [Contract Messages](#tag/Contract-Messages) (internal transactions) - transfers originating \nfrom a contract account\n\n- Block rewards\n\n- Uncle rewards\n\nWe'll call the underlying event that triggered the Ether movement the transfer's *carrier*.\n\nIt is usually difficult to get a complete picture of the Ether inflows for an arbitrary account\nusing only the native Ethereum `json-rpc` interface. Cases susch as multi-sig withdrawals \n(e.g. withdrawing Ether from an exchange), receiving a prize from a bounty contract, or collecting\na mining reward cannot be properly monitored only by looking at the transaction feed, and there \nis no built-in method to retrieve internal transfers (transfers initiated by a smart contract).\n\nAll these use cases are addressed by the EtherTransfer collection, which provides an aggregate,\ncomplete list of all inflows and outflows for any on-chain account, across all carrier types.\n"
    },
    {
      "name": "Tokens",
      "description": "A **Token** is a fungible virtual good that can be traded. ERC-20 Tokens comply to the standard described in the [Ethereum ERC-20 proposal](https://eips.ethereum.org/EIPS/eip-20)."
    },
    {
      "name": "Token-Transfers",
      "description": "A **Token Transfer** is the record of an amount of token units being transferred from one account to another account. If the token complies to ERC-20 the transfer is logged by a LogEntry."
    },
    {
      "name": "Ether-Balances",
      "description": "An **Ether Balance** object describes the ether holdings of a given Account address, at a given block (latest by default). This value is equivalent to the result of an `eth_getBalance` RPC call on a network node, performed at the given block."
    },
    {
      "name": "Token-Balances",
      "description": "A **Token Balance** describes the holdings of a given Account address, for a given Token, at a given block (latest by default). This value is equivalent to the result of a `balanceOf` method call on the corresponding ERC-20 token contract, performed at the given block."
    },
    {
      "name": "Webhooks",
      "description": "A **Webhook** encapsulates information about an API collection that will be automatically monitored \nfor updates, so the user can receive real-time HTTP notifications when new resources that satisfy \nthe query criteria become part of the blockchain.\n\nAll endpoints require [user authentication](#section/Introduction/Authentication).\n\nFor a detailed description of the Webhook data flow see the \n[Webhook introductory section above](#section/Introduction/Webhooks).\n"
    },
    {
      "name": "DeFi",
      "description": "The following endpoints provide current and historical analytics for the main DeFi lending protocols.\n\nThe datasets are only available for the Ethereum **mainnet**. \n\nAll DeFi endpoints require [user authentication](#section/Introduction/Authentication).\n"
    }
  ],
  "components": {
    "schemas": {
      "Account": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "Account"
            ],
            "example": "Account"
          },
          "id": {
            "type": "string",
            "format": "hex160",
            "description": "The Account address",
            "example": "0x50126e8fcb9be29f83c6bbd913cc85b40eaf86fc"
          },
          "attributes": {
            "type": "object",
            "description": "The Account attributes",
            "properties": {
              "address": {
                "description": "A 160-bit identifier for accounts.",
                "example": "0x50126e8fcb9be29f83c6bbd913cc85b40eaf86fc",
                "type": "string",
                "format": "hex160"
              },
              "nonce": {
                "description": "Number of out transactions (ExternalAccount) / Created contract messages (ContractAccount).",
                "example": 3,
                "type": "integer"
              },
              "balance": {
                "description": "A scalar value equal to the number of Wei owned by an account at a given account state.",
                "type": "string",
                "format": "bignum",
                "example": "1600000000000000000"
              }
            }
          },
          "relationships": {
            "type": "object",
            "description": "The Account relationships",
            "properties": {
              "contract": {
                "type": "object",
                "description": "Relates an Account to the details of the contract deployed at its address. Returns `null` if the account is an External account.",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "Contract"
                        ],
                        "example": "Contract"
                      },
                      "id": {
                        "type": "string",
                        "format": "hex160",
                        "example": "0x50126e8fcb9be29f83c6bbd913cc85b40eaf86fc"
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "properties": {
                      "related": {
                        "type": "string",
                        "example": "https://api.aleth.io/v1/accounts/0x50126e8fcb9be29f83c6bbd913cc85b40eaf86fc/contract"
                      }
                    }
                  }
                }
              },
              "transactions": {
                "type": "object",
                "description": "Relates an Account to the list of transactions that either originated from or were sent to its address. The transactions are listed in descending order of their `globalRank` (most recent first).",
                "properties": {
                  "links": {
                    "type": "object",
                    "properties": {
                      "related": {
                        "type": "string",
                        "example": "https://api.aleth.io/v1/accounts/0x50126e8fcb9be29f83c6bbd913cc85b40eaf86fc/transactions"
                      }
                    }
                  }
                }
              },
              "contractMessages": {
                "type": "object",
                "description": "Relates an Account to the list of contract messages that either originated from or were sent to its address. The messages are listed in descending order of their `globalRank` (most recent first).",
                "properties": {
                  "links": {
                    "type": "object",
                    "properties": {
                      "related": {
                        "type": "string",
                        "example": "https://api.aleth.io/v1/accounts/0x50126e8fcb9be29f83c6bbd913cc85b40eaf86fc/contractMessages"
                      }
                    }
                  }
                }
              },
              "etherTransfers": {
                "type": "object",
                "description": "Relates an Account to the list of all EtherTransfers that were either sent to or received by its address. The transfers are listed in descending order by their `globalRank` (most recent first).",
                "properties": {
                  "links": {
                    "type": "object",
                    "properties": {
                      "related": {
                        "type": "string",
                        "example": "https://api.aleth.io/v1/accounts/0x50126e8fcb9be29f83c6bbd913cc85b40eaf86fc/etherTransfers"
                      }
                    }
                  }
                }
              },
              "tokenTransfers": {
                "type": "object",
                "description": "Relates an Account to the list of all TokenTransfers that were either sent to or received by its address. The transfers are listed in descending order by their `globalRank` (most recent first).",
                "properties": {
                  "links": {
                    "type": "object",
                    "properties": {
                      "related": {
                        "type": "string",
                        "example": "https://api.aleth.io/v1/accounts/0x50126e8fcb9be29f83c6bbd913cc85b40eaf86fc/tokenTransfers"
                      }
                    }
                  }
                }
              },
              "etherBalances": {
                "type": "object",
                "description": "Relates an Account to its ether balance. The response is wrapped as a single-element EtherBalance collection (to keep it consistent with the `Account.tokenBalances` collection).",
                "properties": {
                  "links": {
                    "type": "object",
                    "properties": {
                      "related": {
                        "type": "string",
                        "example": "https://api.aleth.io/v1/accounts/0x50126e8fcb9be29f83c6bbd913cc85b40eaf86fc/etherBalances"
                      }
                    }
                  }
                }
              },
              "tokenBalances": {
                "type": "object",
                "description": "Relates an Account to the list of TokenBalances corresponding to all its token holdings. The balances are listed in alphabetical order by their `token` address.",
                "properties": {
                  "links": {
                    "type": "object",
                    "properties": {
                      "related": {
                        "type": "string",
                        "example": "https://api.aleth.io/v1/accounts/0x50126e8fcb9be29f83c6bbd913cc85b40eaf86fc/tokenBalances"
                      }
                    }
                  }
                }
              }
            }
          },
          "links": {
            "type": "object",
            "description": "The links of this Account",
            "properties": {
              "self": {
                "type": "string",
                "description": "The canonical link to this Account resource",
                "example": "https://api.aleth.io/v1/accounts/0x50126e8fcb9be29f83c6bbd913cc85b40eaf86fc"
              }
            }
          }
        }
      },
      "Block": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "Block"
            ],
            "example": "Block"
          },
          "id": {
            "type": "string",
            "format": "hex256",
            "description": "The block hash",
            "example": "0x40dd9a773b81b00aacdc81598d19a5beef3ab66d391cc1cea6fb083294e7a184"
          },
          "attributes": {
            "type": "object",
            "description": "The Block attributes",
            "properties": {
              "number": {
                "description": "A scalar value equal to the number of ancestor blocks. The genesis block has a number of zero.",
                "example": 4041179,
                "type": "integer"
              },
              "blockCreationTime": {
                "description": "This block's inception timestamp (UTC).",
                "example": 1500417203,
                "format": "unixtime",
                "type": "integer"
              },
              "blockHash": {
                "description": "The Keccak 256-bit hash of the block's header, in its entierty.",
                "example": "0x40dd9a773b81b00aacdc81598d19a5beef3ab66d391cc1cea6fb083294e7a184",
                "format": "hex256",
                "type": "string"
              },
              "blockDifficulty": {
                "description": "The difficulty level of this block.",
                "example": "1202852357499802",
                "format": "bignum",
                "type": "string"
              },
              "blockBeneficiaryReward": {
                "description": "The reward the beneficiary receives for mining a block. It is comprised of the base reward (3ETH), rewards for including uncles (1/32 of block reward per uncle) and the fees of the Tx in the block.",
                "example": "5093523764411027795",
                "format": "bignum",
                "type": "string"
              },
              "hasBeneficiaryAlias": {
                "description": "Beneficiary alias",
                "example": "Nanopool",
                "type": "string"
              },
              "blockGasLimit": {
                "description": "A scalar value equal to the current limit of gas expenditure per block. Its purpose is to keep block propagation and processing time low, thereby allowing for a sufficiently decentralized network. Miners have the option to increase or decrease it every block by a certain factor.",
                "example": 6758494,
                "type": "integer"
              },
              "blockGasUsed": {
                "description": "A scalar value equal to the total gas used by all transactions in this block.",
                "example": 6749593,
                "type": "integer"
              },
              "canonical": {
                "description": "A boolean value indicating whether the block is currently part of the main (canonical) chain. A `false` value indicates that the block is no longer included in the canonical chain and is now part of a stale (reorged) branch."
              }
            }
          },
          "relationships": {
            "type": "object",
            "description": "The Block relationships",
            "properties": {
              "parentBlock": {
                "type": "object",
                "description": "Relates a block to its parent in the chain. It always points to the block with a number that is decreased by one, compared to the block it originates from.",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "Block"
                        ],
                        "example": "Block"
                      },
                      "id": {
                        "type": "string",
                        "format": "hex256",
                        "example": "0x1c9fc940ae7ef69c02a2003575d0246cd91c478bcff16bbc623240d744b77c09"
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "properties": {
                      "related": {
                        "type": "string",
                        "example": "https://api.aleth.io/v1/blocks/0x40dd9a773b81b00aacdc81598d19a5beef3ab66d391cc1cea6fb083294e7a184/parentBlock"
                      }
                    }
                  }
                }
              },
              "hasBeneficiary": {
                "type": "object",
                "description": "Relates the block to an account to which fees or mining rewards from the successful mining of this block are transferred.",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "Account"
                        ],
                        "example": "Account"
                      },
                      "id": {
                        "type": "string",
                        "format": "hex160",
                        "example": "0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5"
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "properties": {
                      "related": {
                        "type": "string",
                        "example": "https://api.aleth.io/v1/blocks/0x40dd9a773b81b00aacdc81598d19a5beef3ab66d391cc1cea6fb083294e7a184/hasBeneficiary"
                      }
                    }
                  }
                }
              },
              "transactions": {
                "type": "object",
                "description": "Relates the block to the list of Transactions included in it. The Transactions are listed in reverse chronological order (descending by their `globalRank` value).",
                "properties": {
                  "links": {
                    "type": "object",
                    "properties": {
                      "related": {
                        "type": "string",
                        "example": "https://api.aleth.io/v1/blocks/0x40dd9a773b81b00aacdc81598d19a5beef3ab66d391cc1cea6fb083294e7a184/transactions"
                      }
                    }
                  },
                  "meta": {
                    "type": "object",
                    "description": "The number of Transactions related to this Block.",
                    "properties": {
                      "count": {
                        "type": "integer",
                        "example": 165
                      }
                    }
                  }
                }
              },
              "contractMessages": {
                "type": "object",
                "description": "Relates the block to the list of Contract Messages that were generated as an outcome of executing the block's transactions. The Contract Messages are listed in reverse chronological order (descending by their `globalRank` attribute).",
                "properties": {
                  "links": {
                    "type": "object",
                    "properties": {
                      "related": {
                        "type": "string",
                        "example": "https://api.aleth.io/v1/blocks/0x40dd9a773b81b00aacdc81598d19a5beef3ab66d391cc1cea6fb083294e7a184/contractMessages"
                      }
                    }
                  }
                }
              },
              "logEntries": {
                "type": "object",
                "description": "Relates the block to the list of Log Entries that were generated as an outcome of executing the block's transactions. The Log Entries are listed in reverse chronological order (descending by their `globalRank` attribute).",
                "properties": {
                  "links": {
                    "type": "object",
                    "properties": {
                      "related": {
                        "type": "string",
                        "example": "https://api.aleth.io/v1/blocks/0x40dd9a773b81b00aacdc81598d19a5beef3ab66d391cc1cea6fb083294e7a184/logEntries"
                      }
                    }
                  }
                }
              },
              "etherTransfers": {
                "type": "object",
                "description": "Relates the block to the list of all EtherTransfers that have been triggered within the block.",
                "properties": {
                  "links": {
                    "type": "object",
                    "properties": {
                      "related": {
                        "type": "string",
                        "example": "https://api.aleth.io/v1/blocks/0x40dd9a773b81b00aacdc81598d19a5beef3ab66d391cc1cea6fb083294e7a184/etherTransfers"
                      }
                    }
                  }
                }
              },
              "tokenTransfers": {
                "type": "object",
                "description": "Relates the block to the list of all TokenTransfers that have been created as an outcome of executing the block's transactions.",
                "properties": {
                  "links": {
                    "type": "object",
                    "properties": {
                      "related": {
                        "type": "string",
                        "example": "https://api.aleth.io/v1/blocks/0x40dd9a773b81b00aacdc81598d19a5beef3ab66d391cc1cea6fb083294e7a184/tokenTransfers"
                      }
                    }
                  }
                }
              }
            }
          },
          "links": {
            "type": "object",
            "description": "The links of this Block",
            "properties": {
              "self": {
                "type": "string",
                "description": "The canonical link to this Block resource",
                "example": "https://api.aleth.io/v1/blocks/0x40dd9a773b81b00aacdc81598d19a5beef3ab66d391cc1cea6fb083294e7a184"
              }
            }
          }
        }
      },
      "ContractMessage": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "ContractMessage"
            ],
            "example": "ContractMessage"
          },
          "id": {
            "type": "string",
            "description": "The contract message composite ID",
            "example": "msg:0xb53fdc2d618b5c35da706b399f9201721a74082fdb46ee90e487c82e422a4c8c:4"
          },
          "attributes": {
            "type": "object",
            "description": "The ContractMessage attributes",
            "properties": {
              "msgType": {
                "description": "The message type. For a ContractMessage resource, this can be `ValueContractMsg` for a simple ether transfer, `CallContractMsg` for a call to another piece of contract code, `CreateContractMsg` for the deployment of a new contract, or `SelfdestructContractMsg` for the selfdestruction of a contract.",
                "example": "CallContractMsg",
                "enum": [
                  "ValueContractMsg",
                  "CallContractMsg",
                  "CreateContractMsg",
                  "SelfdestructContractMsg"
                ]
              },
              "value": {
                "description": "A scalar value equal to the number of Wei to be transferred to the Message call's recipient. In the case of contract creation it is the initial balance of the contract account, paid by the sending account.",
                "example": "0",
                "format": "bignum",
                "type": "string"
              },
              "msgGasLimit": {
                "description": "A scalar value equal to the maximum amount of gas that should be used in executing this transaction. This is paid up-front, before any computation is done and may not be increased later. If used with contract messages it represents the fraction of the original transaction gas limit still available for execution of the contract message. After all resulting computations are done, excess gas is returned to the sender of the original transaction.",
                "example": 193347,
                "type": "integer"
              },
              "txGasPrice": {
                "description": "Price in Wei to be paid per unit of gas for all computation costs incurred as a result of the execution of this transaction. This implies that contract messages resulting from the transaction pay the same gas price.",
                "example": "8000000000",
                "format": "bignum",
                "type": "string"
              },
              "globalRank": {
                "description": "A triple that describes the global order of the transaction. The first element is the block number. The second element is the message index in the context of the block (counting both Transactions and ContractMessages in the order they were executed). The third element is always `0` for ContractMessages.",
                "example": [
                  7000000,
                  7,
                  0
                ],
                "type": "array",
                "items": {
                  "type": "int"
                },
                "minItems": 3,
                "maxItems": 3
              },
              "cmsgIndex": {
                "description": "The index of the ContractMessage within the Transaction that triggered it.",
                "example": 4,
                "type": "integer"
              },
              "msgCallDepth": {
                "description": "A scalar value describing the depth of this contract message in the call tree whose root is the transaction.",
                "example": 2,
                "type": "integer"
              },
              "blockCreationTime": {
                "description": "The inception timestamp (UTC) for the block that has included the transaction.",
                "example": 1546466952,
                "format": "unixtime",
                "type": "integer"
              },
              "msgGasUsed": {
                "description": "The amount of gas that was used for processing a single message, regardless of which type of message it may be.",
                "example": 4800,
                "type": "integer"
              },
              "fee": {
                "description": "The total amout of ether (wei) that was used for processing this contract messages. `fee = Gas price * Gas used`",
                "example": "38400000000000",
                "format": "bignum",
                "type": "string"
              },
              "msgError": {
                "description": "A boolean value indicating whether the message validation resulted in an error. A \"true\" value indicates an error.",
                "example": false,
                "type": "boolean"
              },
              "msgErrorString": {
                "description": "A string informally describing an error that occured during the validation of a message. Only exists if msgError is true.",
                "example": "",
                "type": "string"
              },
              "msgPayload": {
                "description": "The interpretation of the data payload associated with this ContractMessage.",
                "type": "object",
                "properties": {
                  "funcDefinition": {
                    "description": "The full function definition (including argument names and function modifiers)",
                    "example": "",
                    "type": "string"
                  },
                  "funcName": {
                    "description": "Only the name of the function (without arguments and modifiers)",
                    "example": "",
                    "type": "string"
                  },
                  "funcSignature": {
                    "description": "The function name with the parenthesised list of parameter types",
                    "example": "",
                    "type": "string"
                  },
                  "funcSelector": {
                    "description": "The first 4 bytes of the Keccak256 hash of the function signature",
                    "example": "0x5e9a523c",
                    "type": "string"
                  },
                  "inputs": {
                    "description": "The list of decoded parameters that were passed to the function",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "type": {
                          "type": "string"
                        },
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "outputs": {
                    "description": "The values returned by the function as a reslt of is execution",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "type": {
                          "type": "string"
                        },
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "raw": {
                    "description": "An unlimited size byte array specifying the raw data payload of the transaction.",
                    "example": "0x5e9a523c00000000000000000000000089d24a6b4ccb1b6faa2625fe562bdd9a23260359",
                    "format": "hex",
                    "type": "string"
                  }
                }
              },
              "cursor": {
                "description": "The pagination cursor assigned to this resource.",
                "example": "0x006acfc000070000200117aa411843cb",
                "type": "string"
              }
            }
          },
          "relationships": {
            "type": "object",
            "description": "The ContractMessage relationships",
            "properties": {
              "from": {
                "type": "object",
                "description": "Relates a ContractMessage to the Account it originates from.",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "Account"
                        ],
                        "example": "Account"
                      },
                      "id": {
                        "type": "string",
                        "format": "hex160",
                        "example": "0x9e77ad51e5c0825d6e440f49e49ef1a1bca37b5d"
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "properties": {
                      "related": {
                        "type": "string",
                        "example": "https://api.aleth.io/v1/contract-messages/msg:0xb53fdc2d618b5c35da706b399f9201721a74082fdb46ee90e487c82e422a4c8c:4/from"
                      }
                    }
                  }
                }
              },
              "to": {
                "type": "object",
                "description": "Relates a ContractMessage to the Account it is sent to.",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "Account"
                        ],
                        "example": "Account"
                      },
                      "id": {
                        "type": "string",
                        "format": "hex160",
                        "example": "0x02557a5e05defeffd4cae6d83ea3d173b272c904"
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "properties": {
                      "related": {
                        "type": "string",
                        "example": "https://api.aleth.io/v1/contract-messages/msg:0xb53fdc2d618b5c35da706b399f9201721a74082fdb46ee90e487c82e422a4c8c:4/to"
                      }
                    }
                  }
                }
              },
              "originator": {
                "type": "object",
                "description": "Relates a ContractMessage to the sender of the Transaction that triggered it.",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "Account"
                        ],
                        "example": "Account"
                      },
                      "id": {
                        "type": "string",
                        "format": "hex160",
                        "example": "0x65d25e3f2696b73b850daa07dd1e267dcfa67f2d"
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "properties": {
                      "related": {
                        "type": "string",
                        "example": "https://api.aleth.io/v1/contract-messages/msg:0xb53fdc2d618b5c35da706b399f9201721a74082fdb46ee90e487c82e422a4c8c:4/originator"
                      }
                    }
                  }
                }
              },
              "includedInBlock": {
                "type": "object",
                "description": "Relates a ContractMessage to the block where its associated Transaction is included in.",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "Block"
                        ],
                        "example": "Block"
                      },
                      "id": {
                        "type": "string",
                        "format": "hex256",
                        "example": "0x17aa411843cb100e57126e911f51f295f5ddb7e9a3bd25e708990534a828c4b7"
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "properties": {
                      "related": {
                        "type": "string",
                        "example": "https://api.aleth.io/v1/contract-messages/msg:0xb53fdc2d618b5c35da706b399f9201721a74082fdb46ee90e487c82e422a4c8c:4/includedInBlock"
                      }
                    }
                  }
                }
              },
              "transaction": {
                "type": "object",
                "description": "Relates a ContractMessage to the transacion that triggered its execution.",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "Transaction"
                        ],
                        "example": "Transaction"
                      },
                      "id": {
                        "type": "string",
                        "format": "hex256",
                        "example": "0xb53fdc2d618b5c35da706b399f9201721a74082fdb46ee90e487c82e422a4c8c"
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "properties": {
                      "related": {
                        "type": "string",
                        "example": "https://api.aleth.io/v1/contract-messages/msg:0xb53fdc2d618b5c35da706b399f9201721a74082fdb46ee90e487c82e422a4c8c:4/transaction"
                      }
                    }
                  }
                }
              },
              "parentContractMessage": {
                "type": "object",
                "description": "Relates a ContractMessage to its parent Contract Message.",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "ContractMessage"
                        ],
                        "example": "ContractMessage"
                      },
                      "id": {
                        "type": "string",
                        "example": "msg:0xb53fdc2d618b5c35da706b399f9201721a74082fdb46ee90e487c82e422a4c8c:3"
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "properties": {
                      "related": {
                        "type": "string",
                        "example": "https://api.aleth.io/v1/contract-messages/msg:0xb53fdc2d618b5c35da706b399f9201721a74082fdb46ee90e487c82e422a4c8c:4/parentContractMessage"
                      }
                    }
                  }
                }
              },
              "createsContracts": {
                "type": "object",
                "description": "Relates a ContractMessage to the list of all contracts that have been created as a result of executing it and all its derived Contract Messages. The contracts are listed in the order of most recently created first.",
                "properties": {
                  "links": {
                    "type": "object",
                    "properties": {
                      "related": {
                        "type": "string",
                        "example": "https://api.aleth.io/v1/contract-messages/msg:0xb53fdc2d618b5c35da706b399f9201721a74082fdb46ee90e487c82e422a4c8c:4/createsContracts"
                      }
                    }
                  }
                }
              },
              "logEntries": {
                "type": "object",
                "description": "Relates a ContractMessage to the list of all LogEntries that have been created as a result of its execution.",
                "properties": {
                  "links": {
                    "type": "object",
                    "properties": {
                      "related": {
                        "type": "string",
                        "example": "https://api.aleth.io/v1/contract-messages/msg:0xb53fdc2d618b5c35da706b399f9201721a74082fdb46ee90e487c82e422a4c8c:4/logEntries"
                      }
                    }
                  },
                  "meta": {
                    "type": "object",
                    "description": "The number of LogEntries related to this ContractMessage.",
                    "properties": {
                      "count": {
                        "type": "integer",
                        "example": 0
                      }
                    }
                  }
                }
              },
              "tokenTransfers": {
                "type": "object",
                "description": "Relates a ContractMessage to the list of all TokenTransfers that have been created as a result of its execution.",
                "properties": {
                  "links": {
                    "type": "object",
                    "properties": {
                      "related": {
                        "type": "string",
                        "example": "https://api.aleth.io/v1/contract-messages/msg:0xb53fdc2d618b5c35da706b399f9201721a74082fdb46ee90e487c82e422a4c8c:4/tokenTransfers"
                      }
                    }
                  },
                  "meta": {
                    "type": "object",
                    "description": "The number of TokenTransfers related to this ContractMessage.",
                    "properties": {
                      "count": {
                        "type": "integer",
                        "example": 0
                      }
                    }
                  }
                }
              }
            }
          },
          "links": {
            "type": "object",
            "description": "The links of this ContractMessage",
            "properties": {
              "self": {
                "type": "string",
                "description": "The canonical link to this ContractMessage resource",
                "example": "https://api.aleth.io/v1/contract-messages/msg:0xb53fdc2d618b5c35da706b399f9201721a74082fdb46ee90e487c82e422a4c8c:4"
              }
            }
          }
        }
      },
      "Contract": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "Contract"
            ],
            "example": "Contract"
          },
          "id": {
            "type": "string",
            "format": "hex160",
            "description": "The contract address",
            "example": "0x2af47a65da8CD66729b4209C22017d6A5C2d2400"
          },
          "attributes": {
            "type": "object",
            "description": "The Contract attributes",
            "properties": {
              "address": {
                "description": "A 160-bit identifier for the contract account.",
                "example": "0x2af47a65da8CD66729b4209C22017d6A5C2d2400",
                "type": "string",
                "format": "hex160"
              },
              "createdAtTimestamp": {
                "description": "The timestamp of the block that included the transaction which triggered the deployment of the contract.",
                "example": 1513630656,
                "type": "integer",
                "format": "unixtime"
              },
              "constructorArgs": {
                "description": "The list of argumets that were passed to the constructor of the contract.",
                "example": [
                  "0x000000000000000000000000bfdb50dc66c8df9fd9688d8fe5a0c34126427645"
                ],
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "hex"
                }
              },
              "bytecode": {
                "description": "The deployed bytecode of the contract.",
                "example": "0x60606040526004361061013e576000357c010000000000000000000000000000...",
                "type": "string",
                "format": "hex"
              },
              "balance": {
                "description": "A scalar value equal to the number of Wei owned by the contract account.",
                "type": "string",
                "format": "bignum",
                "example": "370537404099999999585"
              },
              "contractName": {
                "description": "The name of the main contract class as defined in the Contract's source code.",
                "example": "StandardBounties",
                "type": "string"
              }
            }
          },
          "relationships": {
            "type": "object",
            "description": "The Contract relationships",
            "properties": {
              "account": {
                "type": "object",
                "description": "Relates a Contract to the Account object that shares its address.",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "Account"
                        ],
                        "example": "Account"
                      },
                      "id": {
                        "type": "string",
                        "format": "hex160",
                        "example": "0x2af47a65da8CD66729b4209C22017d6A5C2d2400"
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "properties": {
                      "related": {
                        "type": "string",
                        "example": "https://api.aleth.io/v1/contracts/0x2af47a65da8CD66729b4209C22017d6A5C2d2400/account"
                      }
                    }
                  }
                }
              },
              "createdAtBlock": {
                "type": "object",
                "description": "Relates a Contract to the block when it was deployed.",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "Block"
                        ],
                        "example": "Block"
                      },
                      "id": {
                        "type": "string",
                        "format": "hex256",
                        "example": "0x2b5ea6f20cc07860890563fb91e1f7f876f8e604a4ba0451a77dd7158caade83"
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "properties": {
                      "related": {
                        "type": "string",
                        "example": "https://api.aleth.io/v1/contracts/0x2af47a65da8CD66729b4209C22017d6A5C2d2400/createdAtBlock"
                      }
                    }
                  }
                }
              },
              "createdAtTransaction": {
                "type": "object",
                "description": "Relates a Contract to the transacion that triggered its creation.",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "Transaction"
                        ],
                        "example": "Transaction"
                      },
                      "id": {
                        "type": "string",
                        "format": "hex256",
                        "example": "0x2929b98c2e0da944901b2ce9c3447f2b943c6f6e747baba3599fd0c2bd461ee0"
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "properties": {
                      "related": {
                        "type": "string",
                        "example": "https://api.aleth.io/v1/contracts/0x2af47a65da8CD66729b4209C22017d6A5C2d2400/createdAtTransaction"
                      }
                    }
                  }
                }
              },
              "token": {
                "type": "object",
                "description": "Relates a Contract to a Token resource that encapsulates token-specific details of the given token contract. Will be `null` if the Contract is not compatible with any supported token standard.",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "Token"
                        ],
                        "example": "Token"
                      },
                      "id": {
                        "type": "string",
                        "format": "hex160",
                        "example": null
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "properties": {
                      "related": {
                        "type": "string",
                        "example": "https://api.aleth.io/v1/contracts/0x2af47a65da8CD66729b4209C22017d6A5C2d2400/token"
                      }
                    }
                  }
                }
              },
              "transactions": {
                "type": "object",
                "description": "Relates a Contract to the list of transactions that either originated from or were sent to its address. The transactions are listed in descending order of their `msgGlobalRank` (most recent first).",
                "properties": {
                  "links": {
                    "type": "object",
                    "properties": {
                      "related": {
                        "type": "string",
                        "example": "https://api.aleth.io/v1/contracts/0x2af47a65da8CD66729b4209C22017d6A5C2d2400/transactions"
                      }
                    }
                  }
                }
              },
              "contractMessages": {
                "type": "object",
                "description": "Relates a Contract to the list of contract messages that either originated from or were sent to its address. The messages are listed in descending order of their `msgGlobalRank` (most recent first).",
                "properties": {
                  "links": {
                    "type": "object",
                    "properties": {
                      "related": {
                        "type": "string",
                        "example": "https://api.aleth.io/v1/contracts/0x2af47a65da8CD66729b4209C22017d6A5C2d2400/contractMessages"
                      }
                    }
                  }
                }
              },
              "logEntries": {
                "type": "object",
                "description": "Relates a Contract to the list of log entries it generated.",
                "properties": {
                  "links": {
                    "type": "object",
                    "properties": {
                      "related": {
                        "type": "string",
                        "example": "https://api.aleth.io/v1/contracts/0x2af47a65da8CD66729b4209C22017d6A5C2d2400/logEntries"
                      }
                    }
                  }
                }
              }
            }
          },
          "links": {
            "type": "object",
            "description": "The links of this Contract",
            "properties": {
              "self": {
                "type": "string",
                "description": "The canonical link to this Contract resource",
                "example": "https://api.aleth.io/v1/contracts/0x2af47a65da8CD66729b4209C22017d6A5C2d2400"
              }
            }
          }
        }
      },
      "Point": {
        "type": "array",
        "items": {
          "oneOf": [
            {
              "type": "integer",
              "format": "unixtime"
            },
            {
              "type": "string",
              "format": "rounded-float"
            }
          ]
        },
        "minItems": 2,
        "maxItems": 2,
        "example": [
          123456789,
          "2.4356"
        ]
      },
      "PointArray": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Point"
        }
      },
      "HistorySeries": {
        "type": "object",
        "properties": {
          "protocol": {
            "allOf": [
              {
                "$ref": "#/components/parameters/AllProtocols"
              },
              {
                "example": "compound"
              }
            ]
          },
          "asset": {
            "allOf": [
              {
                "$ref": "#/components/parameters/AllAssets"
              },
              {
                "example": "dai"
              }
            ]
          },
          "metric": {
            "type": "string",
            "enum": [
              "borrow_apr",
              "earn_apr"
            ],
            "example": "borrow_apr"
          },
          "points": {
            "$ref": "#/components/schemas/PointArray"
          }
        }
      },
      "Snapshot": {
        "type": "object",
        "properties": {
          "protocol": {
            "allOf": [
              {
                "$ref": "#/components/parameters/AllProtocols"
              },
              {
                "example": "compound"
              }
            ]
          },
          "asset": {
            "allOf": [
              {
                "$ref": "#/components/parameters/AllAssets"
              },
              {
                "example": "dai"
              }
            ]
          },
          "metric": {
            "type": "string",
            "enum": [
              "borrow_apr",
              "earn_apr"
            ],
            "example": "borrow_apr"
          },
          "value": {
            "description": "The current value of the measurement, rounded to 4 decimal places.",
            "type": "string",
            "format": "rounded-float",
            "example": "2.4356"
          },
          "change_24h": {
            "description": "Past 24 hours change in percentages, rounded to 4 decimal places.",
            "type": "string",
            "format": "rounded-float",
            "example": "-4.2424"
          },
          "timestamp": {
            "description": "The Unix timestamp associated with the current measurement.",
            "type": "integer",
            "format": "unixtime",
            "example": 123456789
          }
        }
      },
      "Stats": {
        "type": "object",
        "properties": {
          "protocol": {
            "allOf": [
              {
                "$ref": "#/components/parameters/AllProtocols"
              },
              {
                "example": "compound"
              }
            ]
          },
          "asset": {
            "allOf": [
              {
                "$ref": "#/components/parameters/AllAssets"
              },
              {
                "example": "dai"
              }
            ]
          },
          "collateral_ratio": {
            "$ref": "#/components/schemas/PointArray"
          },
          "outstanding_debt": {
            "$ref": "#/components/schemas/PointArray"
          },
          "supply_volume": {
            "$ref": "#/components/schemas/PointArray"
          }
        }
      },
      "EthPriceHistory": {
        "type": "object",
        "properties": {
          "asset": {
            "type": "string",
            "enum": [
              "eth"
            ],
            "example": "eth"
          },
          "prices": {
            "$ref": "#/components/schemas/PointArray"
          }
        }
      },
      "TokenPriceHistory": {
        "type": "object",
        "properties": {
          "asset": {
            "allOf": [
              {
                "$ref": "#/components/parameters/AllAssets"
              },
              {
                "example": "dai"
              }
            ]
          },
          "prices": {
            "$ref": "#/components/schemas/PointArray"
          }
        }
      },
      "EthLockedHistory": {
        "type": "object",
        "properties": {
          "protocol": {
            "allOf": [
              {
                "$ref": "#/components/parameters/AllProtocols"
              },
              {
                "example": "compound"
              }
            ]
          },
          "eth_locked": {
            "$ref": "#/components/schemas/PointArray"
          }
        }
      },
      "EtherBalance": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "EtherBalance"
            ],
            "example": "EtherBalance"
          },
          "id": {
            "type": "string",
            "format": "hex",
            "description": "The EtherBalance ID is identical to the address of the related Account.",
            "example": "0x0000000000000000000000000000000000000000"
          },
          "attributes": {
            "type": "object",
            "description": "The attributes of this EtherBalance",
            "properties": {
              "balance": {
                "description": "A scalar value equal to the number of wei that are owned by the associated Account.",
                "example": "420000000000000",
                "type": "string",
                "format": "bignum"
              }
            }
          },
          "relationships": {
            "type": "object",
            "description": "The EtherBalance relationships",
            "properties": {
              "account": {
                "type": "object",
                "description": "Relates a EtherBalance to the Account whose balance it refers to.",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "Account"
                        ],
                        "example": "Account"
                      },
                      "id": {
                        "type": "string",
                        "format": "hex160",
                        "example": "0x0000000000000000000000000000000000000000"
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "properties": {
                      "related": {
                        "type": "string",
                        "example": "https://api.aleth.io/v1/ether-balances/0x0000000000000000000000000000000000000000/account"
                      }
                    }
                  }
                }
              }
            }
          },
          "links": {
            "type": "object",
            "description": "The links of this EtherBalance",
            "properties": {
              "self": {
                "type": "string",
                "description": "The canonical link to this EtherBalance resource",
                "example": "https://api.aleth.io/v1/ether-balances/0x0000000000000000000000000000000000000000"
              }
            }
          }
        }
      },
      "EtherTransfer": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "EtherTransfer"
            ],
            "example": "EtherTransfer"
          },
          "id": {
            "type": "string",
            "format": "hex",
            "description": "The EtherTransfer ID is a unique, immutable identifier for the transfer - for all practical purposes, you can think of it as a random value that’s useful for relating the transfer details with other linked data.",
            "example": "0x0079c69c004e00004200f7f0b0a20179"
          },
          "attributes": {
            "type": "object",
            "description": "The attributes of this EtherTransfer",
            "properties": {
              "transferType": {
                "description": "The type of this EtherTransfer, which depends on the underlying carrier entry. The type is `TransactionTransfer` for transfers whose carrier is a Transaction, `ContractMessageTransfer` for transfers whose carrier is a ContractMessage, and `BlockRewardTransfer` for transfers whose carrier is a Block or Uncle Reward.",
                "example": "ContractMessageTransfer",
                "type": "string",
                "enum": [
                  "TransactionTransfer",
                  "ContractMessageTransfer",
                  "BlockRewardTransfer"
                ]
              },
              "value": {
                "description": "A scalar value equal to the number of wei that are transferred to the recipient.",
                "example": "4287663873500000512",
                "type": "string",
                "format": "bignum"
              },
              "fee": {
                "description": "This is non-zero only for EtherTransfers whose carrier is a Transaction entry. It represents the fee (total gas cost) of the transaction measured in wei, which was paid by the originator of the transaction to the miner of the block where the transaction was mined. This account is linked through the `feeRecipient` relationship.",
                "example": "0",
                "type": "string",
                "format": "bignum"
              },
              "total": {
                "description": "The total amount of wei that was debited from the sender, out of which `value` was transferred to the `to` address, and `fee` was transferred to the `feeRecipient` address.",
                "example": "4287663873500000512",
                "type": "string",
                "format": "bignum"
              },
              "blockCreationTime": {
                "description": "The timestamp (UTC) of the block that has included the transfer.",
                "example": 1560839506,
                "format": "unixtime",
                "type": "integer"
              },
              "globalRank": {
                "description": "A triple that describes the global order of the carrier entry associated with this EtherTransfer. The first element is the block number. The second element is the message index in the context of the block (counting both Transactions and ContractMessages in the order they were executed). The third element is non-zero only for uncle rewards, and in that case it points to the uncle index.",
                "example": [
                  7980700,
                  78,
                  0
                ],
                "type": "array",
                "items": {
                  "type": "int"
                },
                "minItems": 3,
                "maxItems": 3
              },
              "cursor": {
                "description": "The pagination cursor assigned to this resource.",
                "example": "0x0079c69c004e00004200f7f0b0a20179",
                "type": "string"
              }
            }
          },
          "relationships": {
            "type": "object",
            "description": "The EtherTransfer relationships",
            "properties": {
              "from": {
                "type": "object",
                "description": "Relates an EtherTransfer to the Account that sent the `value` (and paid the `fee`).",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "Account"
                        ],
                        "example": "Account"
                      },
                      "id": {
                        "type": "string",
                        "format": "hex160",
                        "example": "0x6668ee95f387b0da9bd3e69ec0dbf5f1503b8135"
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "properties": {
                      "related": {
                        "type": "string",
                        "example": "https://api.aleth.io/v1/ether-transfers/0x0079c69c004e00004200f7f0b0a20179/from"
                      }
                    }
                  }
                }
              },
              "to": {
                "type": "object",
                "description": "Relates an EtherTransfer to the Account that received the main transferred `value`. (the recipient of the `fee` will typically be a different Account).",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "Account"
                        ],
                        "example": "Account"
                      },
                      "id": {
                        "type": "string",
                        "format": "hex160",
                        "example": "0xbf0c5d82748ed81b5794e59055725579911e3e4e"
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "properties": {
                      "related": {
                        "type": "string",
                        "example": "https://api.aleth.io/v1/ether-transfers/0x0079c69c004e00004200f7f0b0a20179/to"
                      }
                    }
                  }
                }
              },
              "transaction": {
                "type": "object",
                "description": "Relates an EtherTransfer to the Transacion that triggered it.",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "Transaction"
                        ],
                        "example": "Transaction"
                      },
                      "id": {
                        "type": "string",
                        "format": "hex256",
                        "example": "0x61936196d934a793fb6a2fce76eb294164ede1fad708c9fe37a4b66c88762da3"
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "properties": {
                      "related": {
                        "type": "string",
                        "example": "https://api.aleth.io/v1/ether-transfers/0x0079c69c004e00004200f7f0b0a20179/transaction"
                      }
                    }
                  }
                }
              },
              "contractMessage": {
                "type": "object",
                "description": "Relates an EtherTransfer to the ContractMessage that triggered it.",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "ContractMessage"
                        ],
                        "example": "ContractMessage"
                      },
                      "id": {
                        "type": "string",
                        "example": "msg:0x61936196d934a793fb6a2fce76eb294164ede1fad708c9fe37a4b66c88762da3:1"
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "properties": {
                      "related": {
                        "type": "string",
                        "example": "https://api.aleth.io/v1/ether-transfers/0x0079c69c004e00004200f7f0b0a20179/contractMessage"
                      }
                    }
                  }
                }
              },
              "feeRecipient": {
                "type": "object",
                "description": "Relates an EtherTransfer to the beneficiary (miner account) of the block where the transfer was triggered.",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "Account"
                        ],
                        "example": "Account"
                      },
                      "id": {
                        "type": "string",
                        "format": "hex160",
                        "example": "0x04668ec2f57cc15c381b461b9fedab5d451c8f7f"
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "properties": {
                      "related": {
                        "type": "string",
                        "example": "https://api.aleth.io/v1/ether-transfers/0x0079c69c004e00004200f7f0b0a20179/feeRecipient"
                      }
                    }
                  }
                }
              },
              "block": {
                "type": "object",
                "description": "Relates an EtherTransfer to the block where the transfer was triggered.",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "Block"
                        ],
                        "example": "Block"
                      },
                      "id": {
                        "type": "string",
                        "format": "hex256",
                        "example": "0xf7f0b0a2017979125d2b4418cdf0b1f796d053d28d7ce4d354de5741c07a857e"
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "properties": {
                      "related": {
                        "type": "string",
                        "example": "https://api.aleth.io/v1/ether-transfers/0x0079c69c004e00004200f7f0b0a20179/block"
                      }
                    }
                  }
                }
              }
            }
          },
          "links": {
            "type": "object",
            "description": "The links of this EtherTransfer",
            "properties": {
              "self": {
                "type": "string",
                "description": "The canonical link to this EtherTransfer resource",
                "example": "https://api.aleth.io/v1/ether-transfers/0x0079c69c004e00004200f7f0b0a20179"
              }
            }
          }
        }
      },
      "LogEntry": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "LogEntry"
            ],
            "example": "LogEntry"
          },
          "id": {
            "type": "string",
            "description": "The log entry composite ID",
            "example": "log:0xd70ae3e306514044032fce92bd36a36b90aede20bb119b32672287d28debf5ef:0"
          },
          "attributes": {
            "type": "object",
            "description": "The LogEntry attributes",
            "properties": {
              "hasLogTopics": {
                "description": "The list of topics for this LogEntry",
                "example": [
                  "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
                  "0x000000000000000000000000f30cb9e6f48cde5f3df13231d466fd85e2687e7c",
                  "0x0000000000000000000000007ff6fd154863bedcbb0fa8e63abc9f1f38eec1fc"
                ],
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "hex256"
                }
              },
              "logData": {
                "description": "The (unindexed) data logged by this LogEntry",
                "example": "0x00000000000000000000000000000000000000000000004fa27864e788d40000",
                "type": "string",
                "format": "hex256"
              },
              "globalRank": {
                "description": "A triple that describes the global order of the transaction. The first element is the block number. The second element is the message index in the context of the block (counting both Transactions and ContractMessages in the order they were executed). The third element is the log index (counted from `0` in the context of the Transaction).",
                "example": [
                  7274862,
                  1,
                  0
                ],
                "type": "array",
                "items": {
                  "type": "int"
                },
                "minItems": 3,
                "maxItems": 3
              },
              "eventDecodedError": {
                "description": "Details on the event decoding error"
              },
              "eventDecoded": {
                "decription": "The interpretation of the event payload associated with this LogEntry.",
                "type": "object",
                "properties": {
                  "event": {
                    "description": "The decoded event definition",
                    "example": "Transfer(address indexed from, address indexed to, uint256 value)",
                    "type": "string"
                  },
                  "topic0": {
                    "description": "The first topic of the LogEntry",
                    "example": "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"
                  },
                  "inputs": {
                    "description": "The list of decoded parameters",
                    "example": [
                      {
                        "name": "from",
                        "type": "address",
                        "indexed": true,
                        "value": "0xf30cb9e6f48cde5f3df13231d466fd85e2687e7c"
                      },
                      {
                        "name": "to",
                        "type": "address",
                        "indexed": true,
                        "value": "0x7ff6fd154863bedcbb0fa8e63abc9f1f38eec1fc"
                      },
                      {
                        "name": "value",
                        "type": "uint256",
                        "value": "1469000000000000000000"
                      }
                    ],
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "type": {
                          "type": "string"
                        },
                        "indexed": {
                          "type": "boolean"
                        },
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "cursor": {
                "description": "The pagination cursor assigned to this resource.",
                "example": "0x006f016e0080000030012901007eea7c",
                "type": "string"
              }
            }
          },
          "relationships": {
            "type": "object",
            "description": "The LogEntry relationships",
            "properties": {
              "loggedBy": {
                "type": "object",
                "description": "Relates a LogEntry to the Contract whose code triggered it.",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "Contract"
                        ],
                        "example": "Contract"
                      },
                      "id": {
                        "type": "string",
                        "format": "hex160",
                        "example": "0xc9c4d9ec2b44b241361707679d3db0876ac10ca6"
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "properties": {
                      "related": {
                        "type": "string",
                        "example": "https://api.aleth.io/v1/log-entries/log:0xd70ae3e306514044032fce92bd36a36b90aede20bb119b32672287d28debf5ef:0/loggedBy"
                      }
                    }
                  }
                }
              },
              "block": {
                "type": "object",
                "description": "Relates a LogEntry to the Block in which it was generated.",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "Block"
                        ],
                        "example": "Block"
                      },
                      "id": {
                        "type": "string",
                        "format": "hex256",
                        "example": "0x2901007eea7c9b0c16d3c2c0c1449825687f339b79c655830f8c8891f8cbe1f5"
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "properties": {
                      "related": {
                        "type": "string",
                        "example": "https://api.aleth.io/v1/log-entries/log:0xd70ae3e306514044032fce92bd36a36b90aede20bb119b32672287d28debf5ef:0/block"
                      }
                    }
                  }
                }
              },
              "transaction": {
                "type": "object",
                "description": "Relates a LogEntry to the Transacion that triggered its creation.",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "Transaction"
                        ],
                        "example": "Transaction"
                      },
                      "id": {
                        "type": "string",
                        "format": "hex256",
                        "example": "0xd70ae3e306514044032fce92bd36a36b90aede20bb119b32672287d28debf5ef"
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "properties": {
                      "related": {
                        "type": "string",
                        "example": "https://api.aleth.io/v1/log-entries/log:0xd70ae3e306514044032fce92bd36a36b90aede20bb119b32672287d28debf5ef:0/transaction"
                      }
                    }
                  }
                }
              },
              "contractMessage": {
                "type": "object",
                "description": "Relates a LogEntry to the ContractMessage that triggered its creation.",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "ContractMessage"
                        ],
                        "example": "ContractMessage"
                      },
                      "id": {
                        "type": "string",
                        "format": "hex256",
                        "example": "msg:0xd70ae3e306514044032fce92bd36a36b90aede20bb119b32672287d28debf5ef:1"
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "properties": {
                      "related": {
                        "type": "string",
                        "example": "https://api.aleth.io/v1/log-entries/log:0xd70ae3e306514044032fce92bd36a36b90aede20bb119b32672287d28debf5ef:0/contractMessage"
                      }
                    }
                  }
                }
              }
            }
          },
          "links": {
            "type": "object",
            "description": "The links of this LogEntry",
            "properties": {
              "self": {
                "type": "string",
                "description": "The canonical link to this LogEntry resource",
                "example": "https://api.aleth.io/v1/log-entries/log:0xd70ae3e306514044032fce92bd36a36b90aede20bb119b32672287d28debf5ef:0"
              }
            }
          }
        }
      },
      "Meta": {
        "type": "object",
        "description": "Meta information about the request.",
        "properties": {
          "latestBlock": {
            "type": "object",
            "description": "Information about the latest block in the canonical chain.",
            "properties": {
              "number": {
                "description": "The block number of the latest block.",
                "example": 7909779,
                "type": "integer"
              },
              "blockCreationTime": {
                "description": "The inception timestamp (UTC) of the latest block.",
                "example": 1559879572,
                "format": "unixtime",
                "type": "integer"
              },
              "blockHash": {
                "description": "The hash of the latest block.",
                "example": "0x8f25ead8680577256d43d5401beeb9cefa4cc121478c79c75a2e23a4695aa450",
                "format": "hex256",
                "type": "string"
              }
            }
          }
        }
      },
      "MetaPagination": {
        "type": "object",
        "description": "Meta information about the request.",
        "properties": {
          "latestBlock": {
            "type": "object",
            "description": "Information about the latest block in the canonical chain.",
            "properties": {
              "number": {
                "description": "The block number of the latest block.",
                "example": 7909779,
                "type": "integer"
              },
              "blockCreationTime": {
                "description": "The inception timestamp (UTC) of the latest block.",
                "example": 1559879572,
                "format": "unixtime",
                "type": "integer"
              },
              "blockHash": {
                "description": "The hash of the latest block.",
                "example": "0x8f25ead8680577256d43d5401beeb9cefa4cc121478c79c75a2e23a4695aa450",
                "format": "hex256",
                "type": "string"
              }
            }
          },
          "count": {
            "type": "integer",
            "description": "The number of items included in the current page.",
            "example": 10
          },
          "page": {
            "type": "object",
            "description": "Pagination flags.",
            "properties": {
              "hasNext": {
                "description": "Flags `true` if the `next` page has at least one entry, `false` otherwise",
                "example": true,
                "type": "boolean"
              },
              "hasPrev": {
                "description": "Flags `true` if the `prev` page has at least one entry, `false` otherwise",
                "example": true,
                "type": "boolean"
              }
            }
          }
        }
      },
      "Token": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "Token"
            ],
            "example": "Token"
          },
          "id": {
            "type": "string",
            "format": "hex160",
            "description": "The token contract address",
            "example": "0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359"
          },
          "attributes": {
            "type": "object",
            "description": "The Token attributes",
            "properties": {
              "tokenTypes": {
                "description": "The list of compliant interfaces the token contract exports.",
                "example": [
                  "ERC179Token",
                  "ERC20Token"
                ],
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "ERC179Token",
                    "ERC20Token"
                  ]
                }
              },
              "symbol": {
                "description": "The token symbol.",
                "example": "DAI",
                "type": "string"
              },
              "name": {
                "description": "The name defined in the token contract.",
                "example": "Dai Stablecoin v1.0",
                "type": "string"
              },
              "decimals": {
                "description": "The number of decimal places available for represeting the denominations of the token. This corresponds to the orders of magnitude between the atomic denomination (equivalent of 1 Wei) and the unit denomination (equivalent of 1 Eth). There will be `10^decimals` atomic denominations for every `1` token unit.",
                "example": 18,
                "type": "integer"
              },
              "totalSupply": {
                "description": "The current total token supply (measured in atomic token units).",
                "example": "80908775777626805520803105",
                "type": "string",
                "format": "bignum"
              }
            }
          },
          "relationships": {
            "type": "object",
            "description": "The Token relationships",
            "properties": {
              "contract": {
                "type": "object",
                "description": "Relates a Token to its Contract object.",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "Contract"
                        ],
                        "example": "Contract"
                      },
                      "id": {
                        "type": "string",
                        "format": "hex160",
                        "example": "0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359"
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "properties": {
                      "related": {
                        "type": "string",
                        "example": "https://api.aleth.io/v1/tokens/0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359/contract"
                      }
                    }
                  }
                }
              }
            }
          },
          "links": {
            "type": "object",
            "description": "The links of this Token",
            "properties": {
              "self": {
                "type": "string",
                "description": "The canonical link to this Token resource",
                "example": "https://api.aleth.io/v1/tokens/0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359"
              }
            }
          }
        }
      },
      "TokenBalance": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "TokenBalance"
            ],
            "example": "TokenBalance"
          },
          "id": {
            "type": "string",
            "format": "hex",
            "description": "The TokenBalance ID is a unique, immutable identifier for the balance object - for all practical purposes, you can think of it as a random value that’s useful for relating the transfer details with other linked data.",
            "example": "0x000000000000000000000000000000000000000057ab1e02fee23774580c119740129eac7081e9d3"
          },
          "attributes": {
            "type": "object",
            "description": "The attributes of this TokenBalance",
            "properties": {
              "balance": {
                "description": "A scalar value equal to the number of atomic token units that are owned by the token holder.",
                "example": "420000000000000",
                "type": "string",
                "format": "bignum"
              }
            }
          },
          "relationships": {
            "type": "object",
            "description": "The TokenBalance relationships",
            "properties": {
              "token": {
                "type": "object",
                "description": "Relates a TokenBalance to its associated Token resource.",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "Token"
                        ],
                        "example": "Token"
                      },
                      "id": {
                        "type": "string",
                        "format": "hex160",
                        "example": "0x57ab1e02fee23774580c119740129eac7081e9d3"
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "properties": {
                      "related": {
                        "type": "string",
                        "example": "https://api.aleth.io/v1/token-balances/0x000000000000000000000000000000000000000057ab1e02fee23774580c119740129eac7081e9d3/token"
                      }
                    }
                  }
                }
              },
              "account": {
                "type": "object",
                "description": "Relates a TokenBalance to the Account whose balance it refers to.",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "Account"
                        ],
                        "example": "Account"
                      },
                      "id": {
                        "type": "string",
                        "format": "hex160",
                        "example": "0x0000000000000000000000000000000000000000"
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "properties": {
                      "related": {
                        "type": "string",
                        "example": "https://api.aleth.io/v1/token-balances/0x000000000000000000000000000000000000000057ab1e02fee23774580c119740129eac7081e9d3/account"
                      }
                    }
                  }
                }
              }
            }
          },
          "links": {
            "type": "object",
            "description": "The links of this TokenBalance",
            "properties": {
              "self": {
                "type": "string",
                "description": "The canonical link to this TokenBalance resource",
                "example": "https://api.aleth.io/v1/token-balances/0x000000000000000000000000000000000000000057ab1e02fee23774580c119740129eac7081e9d3"
              }
            }
          }
        }
      },
      "TokenTransfer": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "TokenTransfer"
            ],
            "example": "TokenTransfer"
          },
          "id": {
            "type": "string",
            "format": "hex",
            "description": "The TokenTransfer ID is a unique, immutable identifier for the transfer - for all practical purposes, you can think of it as a random value that’s useful for relating the transfer details with other linked data.",
            "example": "0x0078afae00f600028101320161a91f42"
          },
          "attributes": {
            "type": "object",
            "description": "The attributes of this TokenTransfer",
            "properties": {
              "value": {
                "description": "A scalar value equal to the number of atomic token units that are transferred to the recipient.",
                "example": "494131516286999999790",
                "type": "string",
                "format": "bignum"
              },
              "symbol": {
                "description": "The token symbol.",
                "example": "DAI",
                "type": "string"
              },
              "blockCreationTime": {
                "description": "The timestamp (UTC) of the block that has included the transfer.",
                "example": 1559873076,
                "format": "unixtime",
                "type": "integer"
              },
              "globalRank": {
                "description": "A triple that describes the global order of the log entry associated with this TokenTransfer. The first element is the block number. The second element is the message index in the context of the block (counting both Transactions and ContractMessages in the order they were executed). The third element is the log index (counted from `0` in the context of the Transaction).",
                "example": [
                  7909294,
                  246,
                  2
                ],
                "type": "array",
                "items": {
                  "type": "int"
                },
                "minItems": 3,
                "maxItems": 3
              },
              "decimals": {
                "description": "The number of decimal places available for represeting the denominations of the token. This corresponds to the orders of magnitude between the atomic denomination (equivalent of 1 Wei) and the unit denomination (equivalent of 1 Eth). There will be `10^decimals` atomic denominations for every `1` token unit.",
                "example": 18,
                "type": "integer"
              },
              "cursor": {
                "description": "The pagination cursor assigned to this resource.",
                "example": "0x0078afae00f600028101320161a91f42",
                "type": "string"
              },
              "transactionGasLimit": {
                "description": "Proxy value for the TokenTransfer's transaction gas limit (`msgGasLimit`).",
                "example": 500000,
                "type": "integer"
              },
              "transactionGasPrice": {
                "description": "Proxy value for the TokenTransfer's transaction gas price (`txGasPrice`).",
                "example": "9000000000",
                "type": "string",
                "format": "bignum"
              },
              "transactionGasUsed": {
                "description": "Proxy value for the TokenTransfer's transaction gas used (`txGasUsed`).",
                "example": 287312,
                "type": "integer"
              }
            }
          },
          "relationships": {
            "type": "object",
            "description": "The TokenTransfer relationships",
            "properties": {
              "token": {
                "type": "object",
                "description": "Relates a TokenTransfer to its associated Token resource.",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "Token"
                        ],
                        "example": "Token"
                      },
                      "id": {
                        "type": "string",
                        "format": "hex160",
                        "example": "0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359"
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "properties": {
                      "related": {
                        "type": "string",
                        "example": "https://api.aleth.io/v1/token-transfers/0x0078afae00f600028101320161a91f42/token"
                      }
                    }
                  }
                }
              },
              "from": {
                "type": "object",
                "description": "Relates a TokenTransfer to the Account that sent the token units.",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "Account"
                        ],
                        "example": "Account"
                      },
                      "id": {
                        "type": "string",
                        "format": "hex160",
                        "example": "0x9ae49c0d7f8f9ef4b864e004fe86ac8294e20950"
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "properties": {
                      "related": {
                        "type": "string",
                        "example": "https://api.aleth.io/v1/token-transfers/0x0078afae00f600028101320161a91f42/from"
                      }
                    }
                  }
                }
              },
              "to": {
                "type": "object",
                "description": "Relates a TokenTransfer to the Account that received the token units.",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "Account"
                        ],
                        "example": "Account"
                      },
                      "id": {
                        "type": "string",
                        "format": "hex160",
                        "example": "0x98d29f6b55b59cef1d6c4c9f9b065302989d23d1"
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "properties": {
                      "related": {
                        "type": "string",
                        "example": "https://api.aleth.io/v1/token-transfers/0x0078afae00f600028101320161a91f42/to"
                      }
                    }
                  }
                }
              },
              "transaction": {
                "type": "object",
                "description": "Relates a TokenTransfer to the Transacion that triggered it.",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "Transaction"
                        ],
                        "example": "Transaction"
                      },
                      "id": {
                        "type": "string",
                        "format": "hex256",
                        "example": "0x7544f294bed67ebf53f369e6a976ce4880174a53dc469fa3cfbc1fba5bcaf529"
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "properties": {
                      "related": {
                        "type": "string",
                        "example": "https://api.aleth.io/v1/token-transfers/0x0078afae00f600028101320161a91f42/transaction"
                      }
                    }
                  }
                }
              },
              "contractMessage": {
                "type": "object",
                "description": "Relates a TokenTransfer to the ContractMessage that triggered it.",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "ContractMessage"
                        ],
                        "example": "ContractMessage"
                      },
                      "id": {
                        "type": "string",
                        "example": "msg:7544f294bed67ebf53f369e6a976ce4880174a53dc469fa3cfbc1fba5bcaf529:40"
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "properties": {
                      "related": {
                        "type": "string",
                        "example": "https://api.aleth.io/v1/token-transfers/0x0078afae00f600028101320161a91f42/contractMessage"
                      }
                    }
                  }
                }
              },
              "logEntry": {
                "type": "object",
                "decription": "Relates a TokenTransfer to its corresponding LogEntry.",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "LogEntry"
                        ],
                        "example": "LogEntry"
                      },
                      "id": {
                        "type": "string",
                        "example": "log:0x7544f294bed67ebf53f369e6a976ce4880174a53dc469fa3cfbc1fba5bcaf529:2"
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "properties": {
                      "related": {
                        "type": "string",
                        "example": "https://api.aleth.io/v1/token-transfers/0x0078afae00f600028101320161a91f42/logEntry"
                      }
                    }
                  }
                }
              },
              "originator": {
                "type": "object",
                "description": "Relates a TokenTransfer to the originator of the Transaction that triggered it.",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "Account"
                        ],
                        "example": "Account"
                      },
                      "id": {
                        "type": "string",
                        "format": "hex160",
                        "example": "0x98d29f6b55b59cef1d6c4c9f9b065302989d23d1"
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "properties": {
                      "related": {
                        "type": "string",
                        "example": "https://api.aleth.io/v1/token-transfers/0x0078afae00f600028101320161a91f42/originator"
                      }
                    }
                  }
                }
              }
            }
          },
          "links": {
            "type": "object",
            "description": "The links of this TokenTransfer",
            "properties": {
              "self": {
                "type": "string",
                "description": "The canonical link to this TokenTransfer resource",
                "example": "https://api.aleth.io/v1/token-transfers/0x0078afae00f600028101320161a91f42"
              }
            }
          }
        }
      },
      "Transaction": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "Transaction"
            ],
            "example": "Transaction"
          },
          "id": {
            "type": "string",
            "format": "hex256",
            "description": "The transaction hash",
            "example": "0x9ed4aff20ae7c029affc78c3467cc4950922bd3d0e925ea6e097cb2f7e8ccf85"
          },
          "attributes": {
            "type": "object",
            "description": "The attributes of this Transaction",
            "properties": {
              "txType": {
                "description": "Type of the transaction. *Deprecated: Use `msgType` instead*",
                "example": "CallTx",
                "enum": [
                  "CallTx",
                  "ValueTx",
                  "CreateTx"
                ],
                "deprecated": true
              },
              "msgType": {
                "description": "The message type. For a Transaction resource, this can be `ValueTx` if the transaction is a simple ether transfer, `CallTx` if the transaction calls a contract, or `CreateTx` if the transaction deploys a new contract.",
                "example": "CallTx",
                "enum": [
                  "CallTx",
                  "ValueTx",
                  "CreateTx"
                ]
              },
              "value": {
                "description": "A scalar value equal to the number of Wei to be transferred to the Message call's recipient. In the case of contract creation it is the initial balance of the contract account, paid by the sending account.",
                "example": "0",
                "format": "bignum",
                "type": "string"
              },
              "txNonce": {
                "description": "A scalar value equal to the number of transactions sent by the sender.",
                "example": 207,
                "type": "integer"
              },
              "msgGasLimit": {
                "description": "A scalar value equal to the maximum amount of gas that should be used in executing this transaction. This is paid up-front, before any computation is done and may not be increased later. If used with contract messages it represents the fraction of the original transaction gas limit still available for execution of the contract message. After all resulting computations are done, excess gas is returned to the sender of the original transaction.",
                "example": 68881,
                "type": "integer"
              },
              "txGasPrice": {
                "description": "Price in Wei to be paid per unit of gas for all computation costs incurred as a result of the execution of this transaction. This implies that contract messages resulting from the transaction pay the same gas price.",
                "example": "2000000000",
                "format": "bignum",
                "type": "string"
              },
              "txHash": {
                "description": "The Keccak 256-bit hash of the transaction.",
                "example": "0x9ed4aff20ae7c029affc78c3467cc4950922bd3d0e925ea6e097cb2f7e8ccf85",
                "format": "hex256",
                "type": "string"
              },
              "txIndex": {
                "description": "The position of a transaction in a block.",
                "example": 43,
                "type": "integer"
              },
              "globalRank": {
                "description": "A triple that describes the global order of the transaction. The first element is the block number. The second element is the message index in the context of the block (counting both Transactions and ContractMessages in the order they were executed). The third element is always `0` for Transactions.",
                "example": [
                  7142277,
                  141,
                  0
                ],
                "type": "array",
                "items": {
                  "type": "int"
                },
                "minItems": 3,
                "maxItems": 3
              },
              "blockCreationTime": {
                "description": "The inception timestamp (UTC) for the block that has included the transaction.",
                "example": 1548735852,
                "format": "unixtime",
                "type": "integer"
              },
              "firstSeen": {
                "description": "The timestamp when Alethio's network nodes have first seen this Transaction in the transaction pool. This is a non-authoritative approximation of the time the Transaction was broadcasted and it will always be lower than or equal to `blockCreationTime`.",
                "example": 1548735819,
                "format": "unixtime",
                "type": "integer"
              },
              "txGasUsed": {
                "description": "The total amount of gas that was used for processing this transaction and all contract messages resulting from it. It is the sum of all `msgGasUsed` by this transaction and resulting contract messages.",
                "example": 45921,
                "type": "integer"
              },
              "fee": {
                "description": "The total amout of ether (wei) that was used for processing this transacton and all its contract messages. `fee = Gas price * Gas used`",
                "example": "91842000000000",
                "format": "bignum",
                "type": "string"
              },
              "msgError": {
                "description": "A boolean value indicating whether the message validation resulted in an error. A \"true\" value indicates an error.",
                "example": false,
                "type": "boolean"
              },
              "msgErrorString": {
                "description": "A string informally describing an error that occured during the validation of a message. Only exists if msgError is true.",
                "example": "",
                "type": "string"
              },
              "msgPayload": {
                "description": "The interpretation of the data payload associated with this transaction.",
                "type": "object",
                "properties": {
                  "funcDefinition": {
                    "description": "The full function definition (including argument names and function modifiers)",
                    "example": "approve(address spender, uint256 value) public nonpayable returns (bool param0)",
                    "type": "string"
                  },
                  "funcName": {
                    "description": "Only the name of the function (without arguments and modifiers)",
                    "example": "approve",
                    "type": "string"
                  },
                  "funcSignature": {
                    "description": "The function name with the parenthesised list of parameter types",
                    "example": "approve(address,uint256)",
                    "type": "string"
                  },
                  "funcSelector": {
                    "description": "The first 4 bytes of the Keccak256 hash of the function signature",
                    "example": "0x095ea7b3",
                    "type": "string"
                  },
                  "inputs": {
                    "description": "The list of decoded parameters that were passed to the function",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "type": {
                          "type": "string"
                        },
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "outputs": {
                    "description": "The values returned by the function as a reslt of is execution",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "type": {
                          "type": "string"
                        },
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "raw": {
                    "description": "An unlimited size byte array specifying the raw data payload of the transaction.",
                    "example": "0x095ea7b30000000000000000000000002af47a65da8cd66729b4209c22017d6a5c2d24000000000000000000000000000000000000000000000000015af1d78b58c40000",
                    "format": "hex",
                    "type": "string"
                  }
                }
              },
              "cursor": {
                "description": "The pagination cursor assigned to this resource.",
                "example": "0x006cfb85008d000010008ca21f438ee5",
                "type": "string"
              }
            }
          },
          "relationships": {
            "type": "object",
            "description": "The relationships of this Transaction",
            "properties": {
              "from": {
                "type": "object",
                "description": "Relates a Transaction to the Account it originates from.",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "Account"
                        ],
                        "example": "Account"
                      },
                      "id": {
                        "type": "string",
                        "format": "hex160",
                        "example": "0x734e4c7dbc53aad51a993828c8b9009aee87196b"
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "properties": {
                      "related": {
                        "type": "string",
                        "example": "https://api.aleth.io/v1/transactions/0x9ed4aff20ae7c029affc78c3467cc4950922bd3d0e925ea6e097cb2f7e8ccf85/from"
                      }
                    }
                  }
                }
              },
              "to": {
                "type": "object",
                "description": "Relates a Transaction to the Account it is sent to.",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "Account"
                        ],
                        "example": "Account"
                      },
                      "id": {
                        "type": "string",
                        "format": "hex160",
                        "example": "0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359"
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "properties": {
                      "related": {
                        "type": "string",
                        "example": "https://api.aleth.io/v1/transactions/0x9ed4aff20ae7c029affc78c3467cc4950922bd3d0e925ea6e097cb2f7e8ccf85/to"
                      }
                    }
                  }
                }
              },
              "includedInBlock": {
                "type": "object",
                "description": "Relates a Transaction to the block it is included in.",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "Block"
                        ],
                        "example": "Block"
                      },
                      "id": {
                        "type": "string",
                        "format": "hex256",
                        "example": "0x8ca21f438ee5eccdb3a806c25d512837eb944d75025954c52a56ff2b346a0151"
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "properties": {
                      "related": {
                        "type": "string",
                        "example": "https://api.aleth.io/v1/transactions/0x9ed4aff20ae7c029affc78c3467cc4950922bd3d0e925ea6e097cb2f7e8ccf85/includedInBlock"
                      }
                    }
                  }
                }
              },
              "createsContracts": {
                "type": "object",
                "description": "Relates a Transaction to the list of all contracts that have been created as a result of executing the transaction and its derived Contract Messages. The contracts are listed in the order of most recently created first.",
                "properties": {
                  "links": {
                    "type": "object",
                    "properties": {
                      "related": {
                        "type": "string",
                        "example": "https://api.aleth.io/v1/transactions/0x9ed4aff20ae7c029affc78c3467cc4950922bd3d0e925ea6e097cb2f7e8ccf85/createsContracts"
                      }
                    }
                  }
                }
              },
              "contractMessages": {
                "type": "object",
                "description": "Relates a Transaction to the list of contract messages that were triggered by its execution. The messages are listed in descending order of their `msgGlobalRank` (most recent first).",
                "properties": {
                  "links": {
                    "type": "object",
                    "properties": {
                      "related": {
                        "type": "string",
                        "example": "https://api.aleth.io/v1/transactions/0x9ed4aff20ae7c029affc78c3467cc4950922bd3d0e925ea6e097cb2f7e8ccf85/contractMessages"
                      }
                    }
                  }
                }
              },
              "logEntries": {
                "type": "object",
                "description": "Relates a Transaction to the list of all LogEntries that have been created as a result of its execution.",
                "properties": {
                  "links": {
                    "type": "object",
                    "properties": {
                      "related": {
                        "type": "string",
                        "example": "https://api.aleth.io/v1/transactions/0x9ed4aff20ae7c029affc78c3467cc4950922bd3d0e925ea6e097cb2f7e8ccf85/logEntries"
                      }
                    }
                  }
                }
              },
              "tokenTransfers": {
                "type": "object",
                "description": "Relates a Transaction to the list of all TokenTransfers that have been created as a result of its execution.",
                "properties": {
                  "links": {
                    "type": "object",
                    "properties": {
                      "related": {
                        "type": "string",
                        "example": "https://api.aleth.io/v1/transactions/0x9ed4aff20ae7c029affc78c3467cc4950922bd3d0e925ea6e097cb2f7e8ccf85/tokenTransfers"
                      }
                    }
                  }
                }
              }
            }
          },
          "links": {
            "type": "object",
            "description": "The links of this Transaction",
            "properties": {
              "self": {
                "type": "string",
                "description": "The canonical link to this Transaction resource",
                "example": "https://api.aleth.io/v1/transactions/0x9ed4aff20ae7c029affc78c3467cc4950922bd3d0e925ea6e097cb2f7e8ccf85"
              }
            }
          }
        }
      },
      "TrusetTag": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "Tag"
            ],
            "example": "Tag"
          },
          "id": {
            "type": "string",
            "description": "The unique id of this Tag",
            "example": "truset.tokens.0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359"
          },
          "attributes": {
            "type": "object",
            "description": "The full TruSet data object associated with this Token."
          },
          "relationships": {
            "type": "object",
            "description": "The relationships of this Tag",
            "properties": {
              "artefact": {
                "type": "object",
                "description": "Relates the Tag to the artefact it refers to (a Token resource)",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "Token"
                        ],
                        "example": "Token"
                      },
                      "id": {
                        "type": "string",
                        "format": "hex160",
                        "example": "0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359"
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "properties": {
                      "self": {
                        "type": "string",
                        "example": "https://api.aleth.io/v1/tokens/0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359"
                      }
                    }
                  }
                }
              }
            }
          },
          "links": {
            "type": "object",
            "description": "The links of this Tag",
            "properties": {
              "self": {
                "type": "string",
                "description": "The canonical link to this Tag resource",
                "example": "https://api.aleth.io/v1/tags/truset/tokens/0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359"
              }
            }
          }
        }
      },
      "Webhook": {
        "type": "object",
        "required": [
          "type",
          "id",
          "attributes"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "Webhook"
            ],
            "example": "Webhook"
          },
          "id": {
            "type": "string",
            "description": "The unique identifier of this Webhook",
            "example": "01b58763142bc7228a27e5c9"
          },
          "attributes": {
            "type": "object",
            "description": "The Webhook attributes",
            "required": [
              "source",
              "target"
            ],
            "properties": {
              "source": {
                "description": "The event source",
                "example": "api",
                "type": "string",
                "enum": [
                  "api"
                ]
              },
              "target": {
                "description": "The target URL where data will be sent to",
                "type": "string",
                "format": "url",
                "example": "https://example.com/webhook-handler"
              },
              "config": {
                "type": "object",
                "required": [
                  "endpoint"
                ],
                "properties": {
                  "endpoint": {
                    "type": "string",
                    "description": "The Alethio API endpoint that describes the collection to be monitored",
                    "example": "https://api.aleth.io/v1/log-entries"
                  },
                  "filters": {
                    "type": "object",
                    "description": "A mapping that describes the filters that will be applied to the endpoint",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "The name of the filter (it will be passed as `filter[filterName]` to the API endpoint)",
                        "example": "value"
                      }
                    }
                  },
                  "confirmations": {
                    "type": "integer",
                    "description": "The confirmation threshold for data (`1` for the latest block, `2` for the parent of the latest block, etc.)",
                    "default": 1,
                    "minimum": 1,
                    "maximum": 20,
                    "example": 1
                  }
                }
              },
              "state": {
                "type": "object",
                "properties": {
                  "cursor": {
                    "type": "string"
                  },
                  "syncedBlock": {
                    "type": "integer"
                  }
                }
              },
              "isActive": {
                "type": "boolean",
                "example": true
              },
              "status": {
                "type": "string",
                "example": "RESUMED_BY_USER"
              },
              "statusTimestamp": {
                "type": "string",
                "format": "iso-8601",
                "example": "2019-11-23T18:25:43.511Z"
              },
              "targetStatus": {
                "type": "number",
                "description": "The most recent HTTP status returned by the webhook target.",
                "nullable": true,
                "example": 200
              },
              "targetResponse": {
                "type": "string",
                "description": "The most recent HTTP response (truncated at 1024 characters) returned by the webhook target.",
                "nullable": true,
                "example": "OK"
              },
              "targetTimestamp": {
                "type": "string",
                "description": "The timestamp of the most recent HTTP response returned by the webhook target.",
                "format": "iso-8601",
                "example": "2019-11-23T18:25:43.511Z"
              }
            }
          },
          "links": {
            "type": "object",
            "required": [
              "self"
            ],
            "properties": {
              "self": {
                "type": "string",
                "example": "https://api.aleth.io/v1/webhooks/01b58763142bc7228a27e5c9",
                "description": "The canonical link of this Webhook"
              }
            }
          }
        }
      },
      "WebhookCreateRequest": {
        "type": "object",
        "required": [
          "type",
          "id",
          "attributes"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "Webhook"
            ],
            "example": "Webhook"
          },
          "attributes": {
            "type": "object",
            "description": "The Webhook attributes",
            "required": [
              "source",
              "target",
              "config"
            ],
            "properties": {
              "source": {
                "description": "The event source",
                "example": "api",
                "type": "string",
                "enum": [
                  "api"
                ]
              },
              "target": {
                "description": "The target URL where data will be sent to",
                "type": "string",
                "format": "url",
                "example": "https://example.com/webhook-handler"
              },
              "config": {
                "type": "object",
                "required": [
                  "endpoint"
                ],
                "properties": {
                  "endpoint": {
                    "type": "string",
                    "description": "The Alethio API endpoint that describes the collection to be monitored",
                    "example": "https://api.aleth.io/v1/log-entries"
                  },
                  "filters": {
                    "type": "object",
                    "description": "A mapping that describes the filters that will be applied to the endpoint",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "The name of the filter (it will be passed as `filter[filterName]` to the API endpoint)",
                        "example": "value"
                      }
                    }
                  },
                  "confirmations": {
                    "type": "integer",
                    "description": "The confirmation threshold for data (`1` for the latest block, `2` for the parent of the latest block, etc.)",
                    "default": 1,
                    "minimum": 1,
                    "maximum": 20,
                    "example": 1
                  }
                }
              }
            }
          }
        }
      }
    },
    "responses": {
      "Account": {
        "description": "Account",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/Account"
                },
                "meta": {
                  "$ref": "#/components/schemas/Meta"
                }
              }
            }
          }
        }
      },
      "AccountActivityList": {
        "description": "Account Activity List",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/Transaction"
                      },
                      {
                        "$ref": "#/components/schemas/ContractMessage"
                      },
                      {
                        "$ref": "#/components/schemas/EtherTransfer"
                      },
                      {
                        "$ref": "#/components/schemas/TokenTransfer"
                      }
                    ]
                  }
                },
                "links": {
                  "type": "object",
                  "description": "The links for fetching the `next` and `prev` pages.",
                  "properties": {
                    "prev": {
                      "type": "string",
                      "description": "Link to the previous page.",
                      "example": "/transactions?page[limit]=10&page[prev]=0x006cfb85008d000010008ca21f438ee5"
                    },
                    "next": {
                      "type": "string",
                      "description": "Link to the next page.",
                      "example": "/transactions?page[limit]=10&page[next]=0x006cfb85008d000010008ca21f438ee5"
                    }
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/MetaPagination"
                }
              }
            }
          }
        }
      },
      "Block": {
        "description": "Block",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/Block"
                },
                "meta": {
                  "$ref": "#/components/schemas/Meta"
                }
              }
            }
          }
        }
      },
      "BlockList": {
        "description": "Block List",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Block"
                  }
                },
                "links": {
                  "type": "object",
                  "description": "The links for fetching the `next` and `prev` pages.",
                  "properties": {
                    "prev": {
                      "type": "string",
                      "description": "Link to the previous page.",
                      "example": "/blocks?page[limit]=10&page[prev]=0x30b65c7412e887eb888abadb230171e7dc09da7bbe0f2a475c0feeed6950dc3b"
                    },
                    "next": {
                      "type": "string",
                      "description": "Link to the next page.",
                      "example": "/blocks?page[limit]=10&page[next]=0x30b65c7412e887eb888abadb230171e7dc09da7bbe0f2a475c0feeed6950dc3b"
                    }
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/MetaPagination"
                }
              }
            }
          }
        }
      },
      "ContractMessage": {
        "description": "ContractMessage",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/ContractMessage"
                },
                "meta": {
                  "$ref": "#/components/schemas/Meta"
                }
              }
            }
          }
        }
      },
      "ContractMessageList": {
        "description": "ContractMessage List",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContractMessage"
                  }
                },
                "links": {
                  "type": "object",
                  "description": "The links for fetching the `next` and `prev` pages.",
                  "properties": {
                    "prev": {
                      "type": "string",
                      "description": "Link to the previous page.",
                      "example": "/contract-messages?page[limit]=10&page[prev]=0x006acfc000070000200117aa411843cb"
                    },
                    "next": {
                      "type": "string",
                      "description": "Link to the next page.",
                      "example": "/contract-messages?page[limit]=10&page[next]=0x006acfc000070000200117aa411843cb"
                    }
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/MetaPagination"
                }
              }
            }
          }
        }
      },
      "Contract": {
        "description": "Contract",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/Contract"
                },
                "meta": {
                  "$ref": "#/components/schemas/Meta"
                }
              }
            }
          }
        }
      },
      "ContractList": {
        "description": "Contract List",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Contract"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/Meta"
                }
              }
            }
          }
        }
      },
      "History": {
        "description": "History",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HistorySeries"
                  }
                }
              }
            }
          }
        }
      },
      "Snapshot": {
        "description": "Snapshot",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Snapshot"
                  }
                }
              }
            }
          }
        }
      },
      "Stats": {
        "description": "Stats",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Stats"
                  }
                }
              }
            }
          }
        }
      },
      "EthPriceHistory": {
        "description": "EthPriceHistory",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EthPriceHistory"
                  }
                }
              }
            }
          }
        }
      },
      "TokenPriceHistory": {
        "description": "TokenPriceHistory",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TokenPriceHistory"
                  }
                }
              }
            }
          }
        }
      },
      "EthLockedHistory": {
        "description": "EthLockedHistory",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EthLockedHistory"
                  }
                }
              }
            }
          }
        }
      },
      "Empty": {
        "description": "Empty object",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Unauthorized",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "properties": {
                "errors": {
                  "type": "array",
                  "description": "A list of error objects",
                  "items": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "example": "401"
                      },
                      "code": {
                        "type": "string",
                        "example": "unauthorized"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "FailedDependency": {
        "description": "Failed Dependency",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "properties": {
                "errors": {
                  "type": "array",
                  "description": "A list of error objects",
                  "items": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "example": "424"
                      },
                      "code": {
                        "type": "string",
                        "example": "failed_dependency"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "Forbidden": {
        "description": "Forbidden",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "properties": {
                "errors": {
                  "type": "array",
                  "description": "A list of error objects",
                  "items": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "example": "403"
                      },
                      "code": {
                        "type": "string",
                        "example": "forbidden"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "EtherBalance": {
        "description": "EtherBalance",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/EtherBalance"
                },
                "meta": {
                  "$ref": "#/components/schemas/Meta"
                }
              }
            }
          }
        }
      },
      "EtherBalanceList": {
        "description": "EtherBalance List",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EtherBalance"
                  }
                },
                "links": {
                  "type": "object",
                  "description": "The links for fetching the `next` and `prev` pages.",
                  "properties": {
                    "prev": {
                      "type": "string",
                      "description": "Link to the previous page.",
                      "example": "/ether-balances?page[limit]=10&page[prev]=0x0000000000000000000000000000000000000000"
                    },
                    "next": {
                      "type": "string",
                      "description": "Link to the next page.",
                      "example": "/ether-balances?page[limit]=10&page[next]=0x0000000000000000000000000000000000000000"
                    }
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/MetaPagination"
                }
              }
            }
          }
        }
      },
      "EtherTransfer": {
        "description": "EtherTransfer",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/EtherTransfer"
                },
                "meta": {
                  "$ref": "#/components/schemas/Meta"
                }
              }
            }
          }
        }
      },
      "EtherTransferList": {
        "description": "EtherTransfer List",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EtherTransfer"
                  }
                },
                "links": {
                  "type": "object",
                  "description": "The links for fetching the `next` and `prev` pages.",
                  "properties": {
                    "prev": {
                      "type": "string",
                      "description": "Link to the previous page.",
                      "example": "/ether-transfers?page[limit]=10&page[prev]=0x0079c69c004e00004200f7f0b0a20179"
                    },
                    "next": {
                      "type": "string",
                      "description": "Link to the next page.",
                      "example": "/ether-transfers?page[limit]=10&page[next]=0x0079c69c004e00004200f7f0b0a20179"
                    }
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/MetaPagination"
                }
              }
            }
          }
        }
      },
      "LogEntry": {
        "description": "LogEntry",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/LogEntry"
                },
                "meta": {
                  "$ref": "#/components/schemas/Meta"
                }
              }
            }
          }
        }
      },
      "LogEntryList": {
        "description": "LogEntry List",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LogEntry"
                  }
                },
                "links": {
                  "type": "object",
                  "description": "The links for fetching the `next` and `prev` pages.",
                  "properties": {
                    "prev": {
                      "type": "string",
                      "description": "Link to the previous page.",
                      "example": "/log-entries?page[limit]=10&page[prev]=0x006f016e0080000030012901007eea7c"
                    },
                    "next": {
                      "type": "string",
                      "description": "Link to the next page.",
                      "example": "/log-entries?page[limit]=10&page[next]=0x006f016e0080000030012901007eea7c"
                    }
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/MetaPagination"
                }
              }
            }
          }
        }
      },
      "Token": {
        "description": "Token",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/Token"
                },
                "meta": {
                  "$ref": "#/components/schemas/Meta"
                }
              }
            }
          }
        }
      },
      "TokenList": {
        "description": "Token List",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Token"
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/Meta"
                }
              }
            }
          }
        }
      },
      "TokenBalance": {
        "description": "TokenBalance",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/TokenBalance"
                },
                "meta": {
                  "$ref": "#/components/schemas/Meta"
                }
              }
            }
          }
        }
      },
      "TokenBalanceList": {
        "description": "TokenBalance List",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TokenBalance"
                  }
                },
                "links": {
                  "type": "object",
                  "description": "The links for fetching the `next` and `prev` pages.",
                  "properties": {
                    "prev": {
                      "type": "string",
                      "description": "Link to the previous page.",
                      "example": "/token-balances?page[limit]=10&page[prev]=0x0000000000000000000000000000000000000000df0960778c6e6597f197ed9a25f12f5d971da86c"
                    },
                    "next": {
                      "type": "string",
                      "description": "Link to the next page.",
                      "example": "/token-balances?page[limit]=10&page[next]=0x0000000000000000000000000000000000000000df0960778c6e6597f197ed9a25f12f5d971da86c"
                    }
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/MetaPagination"
                }
              }
            }
          }
        }
      },
      "TokenTransfer": {
        "description": "TokenTransfer",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/TokenTransfer"
                },
                "meta": {
                  "$ref": "#/components/schemas/Meta"
                }
              }
            }
          }
        }
      },
      "TokenTransferList": {
        "description": "TokenTransfer List",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TokenTransfer"
                  }
                },
                "links": {
                  "type": "object",
                  "description": "The links for fetching the `next` and `prev` pages.",
                  "properties": {
                    "prev": {
                      "type": "string",
                      "description": "Link to the previous page.",
                      "example": "/token-transfers?page[limit]=10&page[prev]=0x0078afae00f600028101320161a91f42"
                    },
                    "next": {
                      "type": "string",
                      "description": "Link to the next page.",
                      "example": "/token-transfers?page[limit]=10&page[next]=0x0078afae00f600028101320161a91f42"
                    }
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/MetaPagination"
                }
              }
            }
          }
        }
      },
      "Transaction": {
        "description": "Transaction",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/Transaction"
                },
                "meta": {
                  "$ref": "#/components/schemas/Meta"
                }
              }
            }
          }
        }
      },
      "TransactionList": {
        "description": "Transaction List",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Transaction"
                  }
                },
                "links": {
                  "type": "object",
                  "description": "The links for fetching the `next` and `prev` pages.",
                  "properties": {
                    "prev": {
                      "type": "string",
                      "description": "Link to the previous page.",
                      "example": "/transactions?page[limit]=10&page[prev]=0x006cfb85008d000010008ca21f438ee5"
                    },
                    "next": {
                      "type": "string",
                      "description": "Link to the next page.",
                      "example": "/transactions?page[limit]=10&page[next]=0x006cfb85008d000010008ca21f438ee5"
                    }
                  }
                },
                "meta": {
                  "$ref": "#/components/schemas/MetaPagination"
                }
              }
            }
          }
        }
      },
      "TrusetTag": {
        "description": "TrusetTag",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/TrusetTag"
                }
              }
            }
          }
        }
      },
      "WebhookList": {
        "description": "Webhook List",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Webhook"
                  }
                },
                "links": {
                  "type": "object",
                  "description": "The links for fetching the `next` and `prev` pages.",
                  "properties": {
                    "prev": {
                      "type": "string",
                      "description": "Link to the previous page.",
                      "example": "/webhooks?page[limit]=10&page[prev]=01b58763142bc7228a27e5c9"
                    },
                    "next": {
                      "type": "string",
                      "description": "Link to the next page.",
                      "example": "/webhooks?page[limit]=10&page[next]=01b58763142bc7228a27e5c9"
                    }
                  }
                },
                "meta": {
                  "type": "object",
                  "properties": {
                    "page": {
                      "type": "object",
                      "description": "Meta information about the next and previous pages.",
                      "properties": {
                        "hasNext": {
                          "type": "boolean",
                          "example": true
                        },
                        "hasPrev": {
                          "type": "boolean",
                          "example": false
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "WebhookDetails": {
        "description": "Webhook Details",
        "content": {
          "application/vnd.api+json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/components/schemas/Webhook"
                },
                "meta": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "parameters": {
      "Authorization": {
        "name": "Authorization",
        "in": "header",
        "required": true,
        "description": "The Alethio API Key associated with the request",
        "schema": {
          "type": "string"
        },
        "example": "Bearer sk_main_xxxxxxxxxxxxx"
      },
      "AllAssets": {
        "type": "string",
        "enum": [
          "eth",
          "dai",
          "sai",
          "usdc",
          "bat",
          "zrx",
          "rep",
          "wbtc",
          "knc",
          "link",
          "usdt",
          "susd",
          "snx",
          "mkr",
          "lend",
          "mana",
          "imbtc",
          "usdx",
          "tusd"
        ]
      },
      "AllProtocols": {
        "type": "string",
        "enum": [
          "maker",
          "mcd",
          "compound",
          "dydx",
          "bzx",
          "ddex",
          "aave",
          "lendf"
        ]
      },
      "Assets": {
        "name": "assets",
        "in": "query",
        "required": false,
        "description": "A comma-separated list of assets to be included in the query.",
        "schema": {
          "allOf": [
            {
              "$ref": "#/components/parameters/AllAssets"
            },
            {
              "format": "comma-separated-list"
            }
          ]
        }
      },
      "Protocols": {
        "name": "protocols",
        "in": "query",
        "required": false,
        "description": "A comma-separated list of protocols to be included in the query.",
        "schema": {
          "allOf": [
            {
              "$ref": "#/components/parameters/AllProtocols"
            },
            {
              "format": "comma-separated-list"
            }
          ]
        }
      },
      "MetricsEarnBorrow": {
        "name": "metrics",
        "in": "query",
        "required": false,
        "description": "A comma-separated list of metrics to be included in the query. \nIf this parameter isn't provided, all available metrics will be included.\n",
        "schema": {
          "type": "string",
          "format": "comma-separated-list",
          "enum": [
            "earn_apr",
            "borrow_apr"
          ]
        }
      },
      "MetricsStats": {
        "name": "metrics",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "format": "comma-separated-list",
          "enum": [
            "collateral_ratio",
            "outstanding_debt",
            "supply_volume"
          ]
        }
      },
      "DeFiBefore": {
        "name": "before",
        "description": "Filter data points before a given timestamp.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "integer",
          "format": "unixtime"
        }
      },
      "DeFiAfter": {
        "name": "after",
        "description": "Filter data points after a given timestamp.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "integer",
          "format": "unixtime"
        }
      },
      "Granularity": {
        "name": "granularity",
        "description": "The aggregation window for the timeseries data points, measured in hours.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "integer",
          "default": 24,
          "minimum": 1,
          "maximum": 8760
        }
      },
      "PageLimit": {
        "name": "page[limit]",
        "in": "query",
        "required": false,
        "description": "The maximum number of items to be included in a page.",
        "schema": {
          "type": "number",
          "minimum": 1,
          "maximum": 100,
          "default": 10
        }
      },
      "PageNext": {
        "name": "page[next]",
        "in": "query",
        "required": false,
        "description": "Instructs the server to fetch the next page of items, starting immediately *after* the provided cursor value. Cannot be used together with `page[prev]` in the same request.",
        "schema": {
          "type": "string"
        },
        "example": "016cfb85008d000010008ca21f438ee5"
      },
      "PagePrev": {
        "name": "page[prev]",
        "in": "query",
        "required": false,
        "description": "Instructs the server to fetch the previous page of items, starting immediately *before* the provided cursor value. Cannot be used together with `page[next]` in the same request.",
        "schema": {
          "type": "string"
        },
        "example": "016cfb85008d000010008ca21f438ee5"
      }
    }
  },
  "paths": {
    "/accounts/{address}": {
      "get": {
        "summary": "Account details",
        "description": "Returns the details of a given [Account](#tag/Accounts) address.",
        "tags": [
          "Accounts"
        ],
        "parameters": [
          {
            "name": "address",
            "description": "Account hex address.",
            "schema": {
              "type": "string",
              "format": "hex160"
            },
            "in": "path",
            "required": true,
            "example": "0x50126e8fcb9be29f83c6bbd913cc85b40eaf86fc"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Account"
          }
        }
      }
    },
    "/accounts/{address}/contract": {
      "get": {
        "summary": "Account contract",
        "description": "Returns the [Contract](#tag/Contracts) resource associated with a given [Account](#tag/Accounts).",
        "tags": [
          "Accounts"
        ],
        "parameters": [
          {
            "name": "address",
            "description": "Account hex address.",
            "schema": {
              "type": "string",
              "format": "hex160"
            },
            "in": "path",
            "required": true,
            "example": "0x50126e8fcb9be29f83c6bbd913cc85b40eaf86fc"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Contract"
          }
        }
      }
    },
    "/accounts/{address}/transactions": {
      "get": {
        "summary": "Account transactions",
        "description": "Returns the list of [Transaction](#tag/Transactions) resources associated with a given [Account](#tag/Accounts), sorted\nin reverse chronological order (most recent first). Both the transactions originating from\nand sent to the account are included.\n\nThis collection supports the same filters as the\n[Transactions](#tag/Transactions/paths/~1transactions?filter[from]={address}/get)\ncollection.\n",
        "tags": [
          "Accounts"
        ],
        "parameters": [
          {
            "name": "address",
            "description": "Account hex address.",
            "schema": {
              "type": "string",
              "format": "hex160"
            },
            "in": "path",
            "required": true,
            "example": "0x50126e8fcb9be29f83c6bbd913cc85b40eaf86fc"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TransactionList"
          }
        }
      }
    },
    "/accounts/{address}/contractMessages": {
      "get": {
        "summary": "Account contract messages",
        "description": "Returns the list of [ContractMessage](#tag/Contract-Messages) resources associated with a given [Account](#tag/Accounts), sorted\nin reverse chronological order (most recent first). Both the contract messages originating from\nand sent to the account are included.\n\nThis collection supports the same filters as the\n[ContractMessages](#tag/Contract-Messages/paths/~1contract-messages?filter[from]={address}/get)\ncollection.\n",
        "tags": [
          "Accounts"
        ],
        "parameters": [
          {
            "name": "address",
            "description": "Account hex address.",
            "schema": {
              "type": "string",
              "format": "hex160"
            },
            "in": "path",
            "required": true,
            "example": "0x50126e8fcb9be29f83c6bbd913cc85b40eaf86fc"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ContractMessageList"
          }
        }
      }
    },
    "/accounts/{address}/etherTransfers": {
      "get": {
        "summary": "Account Ether transfers",
        "description": "Returns the list of [EtherTransfer](#tag/Ether-Transfers) resources associated with a given [Account](#tag/Accounts), sorted\nin reverse chronological order (most recent first). Both the transfers that were sent to or received\nby the account are included.\n\nThis collection supports the same filters as the\n[EtherTransfers](#tag/Ether-Transfers/paths/~1ether-transfers?filter[account]={address}/get)\ncollection.\n",
        "tags": [
          "Accounts"
        ],
        "parameters": [
          {
            "name": "address",
            "description": "Account hex address.",
            "schema": {
              "type": "string",
              "format": "hex160"
            },
            "in": "path",
            "required": true,
            "example": "0x50126e8fcb9be29f83c6bbd913cc85b40eaf86fc"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/EtherTransferList"
          }
        }
      }
    },
    "/accounts/{address}/tokenTransfers": {
      "get": {
        "summary": "Account token transfers",
        "description": "Returns the list of [TokenTransfer](#tag/Token-Transfers) resources associated with a given [Account](#tag/Accounts), sorted\nin reverse chronological order (most recent first). Both the transfers that were sent to or received\nby the account are included.\n\nThis collection supports the same filters as the\n[TokenTransfers](#tag/Token-Transfers/paths/~1token-transfers?filter[from]={address}/get)\ncollection.\n",
        "tags": [
          "Accounts"
        ],
        "parameters": [
          {
            "name": "address",
            "description": "Account hex address.",
            "schema": {
              "type": "string",
              "format": "hex160"
            },
            "in": "path",
            "required": true,
            "example": "0x50126e8fcb9be29f83c6bbd913cc85b40eaf86fc"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TokenTransferList"
          }
        }
      }
    },
    "/accounts/{address}/tokenBalances": {
      "get": {
        "summary": "Account token balances",
        "description": "Returns the list of `TokenBalance` resources associated with a\ngiven [Account](#tag/Accounts), sorted in alphabetical order by [Token](#tag/Tokens) address.\n\nThis collection supports the same filters as the \n[TokenBalances](#tag/Token-Balances/paths/~1token-balances?filter[account]={address}&filter[token]={token}/get)\ncollection. \n",
        "tags": [
          "Accounts"
        ],
        "parameters": [
          {
            "name": "address",
            "description": "Account hex address.",
            "schema": {
              "type": "string",
              "format": "hex160"
            },
            "in": "path",
            "required": true,
            "example": "0x50126e8fcb9be29f83c6bbd913cc85b40eaf86fc"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TokenBalanceList"
          }
        }
      }
    },
    "/accounts/{address}/activity": {
      "get": {
        "summary": "Account activity",
        "description": "Consolidates the activity of a given [Account](#tag/Accounts) in a unified list of entries.\n\nReturns an aggregated list of [Transaction](#tag/Transactions), [ContractMessage](#tag/Contract-Messages), [EtherTransfer](#tag/Ether-Transfers)\nand [TokenTransfer](#tag/Token-Transfers) resources, sorted in reverse chronological order.      \n",
        "tags": [
          "Accounts"
        ],
        "parameters": [
          {
            "name": "address",
            "description": "Account hex address.",
            "schema": {
              "type": "string",
              "format": "hex160"
            },
            "in": "path",
            "required": true,
            "example": "0x50126e8fcb9be29f83c6bbd913cc85b40eaf86fc"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/AccountActivityList"
          }
        }
      }
    },
    "/blocks": {
      "get": {
        "summary": "All blocks",
        "description": "Returns the list of all [Block](#tag/Blocks) resources that are currently part of the main (canonical) chain, in reverse chronological order (most recently mined first).",
        "tags": [
          "Blocks"
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/BlockList"
          }
        }
      }
    },
    "/blocks/{blockHash}": {
      "get": {
        "summary": "Block by hash",
        "description": "Returns the [Block](#tag/Blocks) resource identified by a given block hash. The block can either be part of the current main (canonical) chain or part of a stale (reorged) branch, if the branch was visible to Alethio's network nodes at the time of the reorg.",
        "tags": [
          "Blocks"
        ],
        "parameters": [
          {
            "name": "blockHash",
            "description": "The block hash in hex format.",
            "schema": {
              "type": "string",
              "format": "hex256"
            },
            "in": "path",
            "required": true,
            "example": "0x40dd9a773b81b00aacdc81598d19a5beef3ab66d391cc1cea6fb083294e7a184"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Block"
          }
        }
      }
    },
    "/blocks/{number}": {
      "get": {
        "summary": "Block by number",
        "description": "Returns the [Block](#tag/Blocks) resource for a given block number.",
        "tags": [
          "Blocks"
        ],
        "parameters": [
          {
            "name": "number",
            "description": "The block number.",
            "schema": {
              "type": "integer"
            },
            "in": "path",
            "required": true,
            "example": 4041179
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Block"
          }
        }
      }
    },
    "/blocks/{label}": {
      "get": {
        "summary": "Block by label",
        "description": "Returns the [Block](#tag/Blocks) resource for a given label (`genesis` or `latest`).",
        "tags": [
          "Blocks"
        ],
        "parameters": [
          {
            "name": "label",
            "description": "The block label.",
            "schema": {
              "type": "string",
              "enum": [
                "genesis",
                "latest"
              ]
            },
            "in": "path",
            "required": true,
            "example": "latest"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Block"
          }
        }
      }
    },
    "/blocks/{blockHash}/parentBlock": {
      "get": {
        "summary": "Block parent",
        "description": "Returns the [Block](#tag/Blocks) resource representing the parent of a given block.",
        "tags": [
          "Blocks"
        ],
        "parameters": [
          {
            "name": "blockHash",
            "description": "The block hash in hex format.",
            "schema": {
              "type": "string",
              "format": "hex256"
            },
            "in": "path",
            "required": true,
            "example": "0x40dd9a773b81b00aacdc81598d19a5beef3ab66d391cc1cea6fb083294e7a184"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Block"
          }
        }
      }
    },
    "/blocks/{blockHash}/hasBeneficiary": {
      "get": {
        "summary": "Block beneficiary",
        "description": "Returns the [Account](#tag/Accounts) resource representing the beneficiary of a given block. The *beneficiary* of a [Block](#tag/Blocks) is the account to which fees or mining rewards from the successful mining are transferred.",
        "tags": [
          "Blocks"
        ],
        "parameters": [
          {
            "name": "blockHash",
            "description": "The block hash in hex format.",
            "schema": {
              "type": "string",
              "format": "hex256"
            },
            "in": "path",
            "required": true,
            "example": "0x40dd9a773b81b00aacdc81598d19a5beef3ab66d391cc1cea6fb083294e7a184"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Account"
          }
        }
      }
    },
    "/blocks/{blockHash}/transactions": {
      "get": {
        "summary": "Block transactions",
        "description": "Returns the list of [Transaction](#tag/Transactions) resources included in a block, sorted in reverse chronological order (descending by their `globalRank` attribute).",
        "tags": [
          "Blocks"
        ],
        "parameters": [
          {
            "name": "blockHash",
            "description": "The block hash in hex format.",
            "schema": {
              "type": "string",
              "format": "hex256"
            },
            "in": "path",
            "required": true,
            "example": "0x40dd9a773b81b00aacdc81598d19a5beef3ab66d391cc1cea6fb083294e7a184"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TransactionList"
          }
        }
      }
    },
    "/blocks/{blockHash}/contractMessages": {
      "get": {
        "summary": "Block contract messages",
        "description": "Returns the list of [ContractMessage](#tag/Contract-Messages) resources included in a block, sorted in reverse chronological order (descending by their `globalRank` attribute).",
        "tags": [
          "Blocks"
        ],
        "parameters": [
          {
            "name": "blockHash",
            "description": "The block hash in hex format.",
            "schema": {
              "type": "string",
              "format": "hex256"
            },
            "in": "path",
            "required": true,
            "example": "0x40dd9a773b81b00aacdc81598d19a5beef3ab66d391cc1cea6fb083294e7a184"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ContractMessageList"
          }
        }
      }
    },
    "/blocks/{blockHash}/logEntries": {
      "get": {
        "summary": "Block log entries",
        "description": "Returns the list of [LogEntry](#tag/Log-Entries) resources included in a block, sorted in reverse chronological order (descending by their `globalRank` attribute).",
        "tags": [
          "Blocks"
        ],
        "parameters": [
          {
            "name": "blockHash",
            "description": "The block hash in hex format.",
            "schema": {
              "type": "string",
              "format": "hex256"
            },
            "in": "path",
            "required": true,
            "example": "0x40dd9a773b81b00aacdc81598d19a5beef3ab66d391cc1cea6fb083294e7a184"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/LogEntryList"
          }
        }
      }
    },
    "/blocks/{blockHash}/etherTransfers": {
      "get": {
        "summary": "Block Ether transfers",
        "description": "Returns the list of [EtherTransfer](#tag/Ether-Transfers) resources included in a block, sorted in reverse chronological order (descending by their `globalRank` attribute).",
        "tags": [
          "Blocks"
        ],
        "parameters": [
          {
            "name": "blockHash",
            "description": "The block hash in hex format.",
            "schema": {
              "type": "string",
              "format": "hex256"
            },
            "in": "path",
            "required": true,
            "example": "0x40dd9a773b81b00aacdc81598d19a5beef3ab66d391cc1cea6fb083294e7a184"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/EtherTransferList"
          }
        }
      }
    },
    "/blocks/{blockHash}/tokenTransfers": {
      "get": {
        "summary": "Block token transfers",
        "description": "Returns the list of [TokenTransfer](#tag/Token-Transfers) resources included in a block, sorted in reverse chronological order (descending by their `globalRank` attribute).",
        "tags": [
          "Blocks"
        ],
        "parameters": [
          {
            "name": "blockHash",
            "description": "The block hash in hex format.",
            "schema": {
              "type": "string",
              "format": "hex256"
            },
            "in": "path",
            "required": true,
            "example": "0x40dd9a773b81b00aacdc81598d19a5beef3ab66d391cc1cea6fb083294e7a184"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TokenTransferList"
          }
        }
      }
    },
    "/blocks?filter[canonical]={value}": {
      "get": {
        "summary": "Filter by canonical status",
        "description": "Returns the list of [Block](#tag/Blocks) resources filtered by their status of being included in the current canonical (main) chain produced by the consensus network. If this filter is not set explicitly set, its implicit value is `true`.",
        "tags": [
          "Blocks"
        ],
        "parameters": [
          {
            "name": "value",
            "description": "The boolean flag representing the canonical status to filter by.",
            "schema": {
              "type": "boolean"
            },
            "in": "query",
            "required": false,
            "example": false
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/BlockList"
          }
        }
      }
    },
    "/contract-messages/{id}": {
      "get": {
        "summary": "ContractMessage details",
        "description": "Returns the [ContractMessage](#tag/Contract-Messages) resource identified by the given id.",
        "tags": [
          "Contract-Messages"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "The ContractMessage ID.",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true,
            "example": "msg:0xb53fdc2d618b5c35da706b399f9201721a74082fdb46ee90e487c82e422a4c8c:4"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ContractMessage"
          }
        }
      }
    },
    "/contract-messages/{id}/from": {
      "get": {
        "summary": "ContractMessage sender",
        "description": "Returns the [Account](#tag/Accounts) resource representing the sender of a given [ContractMessage](#tag/Contract-Messages).",
        "tags": [
          "Contract-Messages"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "The ContractMessage ID.",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true,
            "example": "msg:0xb53fdc2d618b5c35da706b399f9201721a74082fdb46ee90e487c82e422a4c8c:4"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Account"
          }
        }
      }
    },
    "/contract-messages/{id}/to": {
      "get": {
        "summary": "ContractMessage destination",
        "description": "Returns the [Account](#tag/Accounts) resource representing the destination of a given [ContractMessage](#tag/Contract-Messages).",
        "tags": [
          "Contract-Messages"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "The ContractMessage ID.",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true,
            "example": "msg:0xb53fdc2d618b5c35da706b399f9201721a74082fdb46ee90e487c82e422a4c8c:4"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Account"
          }
        }
      }
    },
    "/contract-messages/{id}/originator": {
      "get": {
        "summary": "ContractMessage originator",
        "description": "Returns the [Account](#tag/Accounts) resource representing the sender of the [Transaction](#tag/Transactions) that triggered a given [ContractMessage](#tag/Contract-Messages).",
        "tags": [
          "Contract-Messages"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "The ContractMessage ID.",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true,
            "example": "msg:0xb53fdc2d618b5c35da706b399f9201721a74082fdb46ee90e487c82e422a4c8c:4"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Account"
          }
        }
      }
    },
    "/contract-messages/{id}/transaction": {
      "get": {
        "summary": "ContractMessage transaction",
        "description": "Returns the [Transaction](#tag/Transactions) resource that triggered the execution of a given [ContractMessage](#tag/Contract-Messages).",
        "tags": [
          "Contract-Messages"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "The ContractMessage ID.",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true,
            "example": "msg:0xb53fdc2d618b5c35da706b399f9201721a74082fdb46ee90e487c82e422a4c8c:4"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Transaction"
          }
        }
      }
    },
    "/contract-messages/{id}/includedInBlock": {
      "get": {
        "summary": "ContractMessage block",
        "description": "Returns the [Block](#tag/Blocks) resource related to the canonical block where the [Transaction](#tag/Transactions) that triggered the given [ContractMessage](#tag/Contract-Messages) was included in.",
        "tags": [
          "Contract-Messages"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "The ContractMessage ID.",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true,
            "example": "msg:0xb53fdc2d618b5c35da706b399f9201721a74082fdb46ee90e487c82e422a4c8c:4"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Block"
          }
        }
      }
    },
    "/contract-messages/{id}/parentContractMessage": {
      "get": {
        "summary": "ContractMessage parent",
        "description": "Returns the [ContractMessage](#tag/Contract-Messages) resource representing the parent that triggered the given [ContractMessage](#tag/Contract-Messages) call. Can be `null` if the given [ContractMessage](#tag/Contract-Messages) was triggered by a transaction call directly.",
        "tags": [
          "Contract-Messages"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "The ContractMessage ID.",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true,
            "example": "msg:0xb53fdc2d618b5c35da706b399f9201721a74082fdb46ee90e487c82e422a4c8c:4"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ContractMessage"
          }
        }
      }
    },
    "/contract-messages/{id}/createsContracts": {
      "get": {
        "summary": "ContractMessage created contracts",
        "description": "Returns the list of [Contract](#tag/Contracts) resources that were created as a result of executing the given [ContractMessage](#tag/Contract-Messages) (and all its descendant contract messages).",
        "tags": [
          "Contract-Messages"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "The ContractMessage ID.",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true,
            "example": "msg:0xb53fdc2d618b5c35da706b399f9201721a74082fdb46ee90e487c82e422a4c8c:4"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ContractList"
          }
        }
      }
    },
    "/contract-messages/{id}/logEntries": {
      "get": {
        "summary": "ContractMessage log entries",
        "description": "Returns the list of all [LogEntry](#tag/Log-Entries) resources that were created as a result of executing the given [ContractMessage](#tag/Contract-Messages).",
        "tags": [
          "Contract-Messages"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "The ContractMessage ID.",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true,
            "example": "msg:0xb53fdc2d618b5c35da706b399f9201721a74082fdb46ee90e487c82e422a4c8c:4"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/LogEntryList"
          }
        }
      }
    },
    "/contract-messages?filter[from]={address}": {
      "get": {
        "summary": "Filter by sender",
        "description": "Returns the list of [ContractMessage](#tag/Contract-Messages) resources whose sender is a given [Account](#tag/Accounts) address, sorted in reverse chronological order (most recent first).",
        "tags": [
          "Contract-Messages"
        ],
        "parameters": [
          {
            "name": "address",
            "description": "The hex address of the originator Account.",
            "schema": {
              "type": "string",
              "format": "hex256"
            },
            "in": "query",
            "required": true,
            "example": "0x50126e8fcb9be29f83c6bbd913cc85b40eaf86fc"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ContractMessageList"
          }
        }
      }
    },
    "/contract-messages?filter[to]={address}": {
      "get": {
        "summary": "Filter by destination",
        "description": "Returns the list of [ContractMessage](#tag/Contract-Messages) resources received by a given [Account](#tag/Accounts) address, sorted in reverse chronological order (most recent first).",
        "tags": [
          "Contract-Messages"
        ],
        "parameters": [
          {
            "name": "address",
            "description": "The hex address of the destination Account.",
            "schema": {
              "type": "string",
              "format": "hex256"
            },
            "in": "query",
            "required": true,
            "example": "0x50126e8fcb9be29f83c6bbd913cc85b40eaf86fc"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ContractMessageList"
          }
        }
      }
    },
    "/contract-messages?filter[account]={address}": {
      "get": {
        "summary": "Filter by account",
        "description": "Returns the list of [ContractMessage](#tag/Contract-Messages) resources that were either sent to or received by a given [Account](#tag/Accounts) address, sorted in reverse chronological order (most recent first).",
        "tags": [
          "Contract-Messages"
        ],
        "parameters": [
          {
            "name": "address",
            "description": "The hex address of the Account.",
            "schema": {
              "type": "string",
              "format": "hex256"
            },
            "in": "query",
            "required": true,
            "example": "0x50126e8fcb9be29f83c6bbd913cc85b40eaf86fc"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ContractMessageList"
          }
        }
      }
    },
    "/contract-messages?filter[msgType]={type}": {
      "get": {
        "summary": "Filter by type",
        "description": "Returns the list of [ContractMessage](#tag/Contract-Messages) resources filtered by their message type, sorted in reverse chronological order (most recent first).",
        "tags": [
          "Contract-Messages"
        ],
        "parameters": [
          {
            "name": "type",
            "description": "The type of the ContractMessage.",
            "schema": {
              "type": "string",
              "enum": [
                "ValueContractMsg",
                "CallContractMsg",
                "CreateContractMsg",
                "SelfdestructContractMsg"
              ]
            },
            "in": "query",
            "required": true,
            "example": "ValueContractMsg"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ContractMessageList"
          }
        }
      }
    },
    "/contracts/{address}": {
      "get": {
        "summary": "Contract details",
        "description": "Returns the [Contract](#tag/Contracts) resource linked to a given address.",
        "tags": [
          "Contracts"
        ],
        "parameters": [
          {
            "name": "address",
            "description": "Contract hex address.",
            "schema": {
              "type": "string",
              "format": "hex160"
            },
            "in": "path",
            "required": true,
            "example": "0x2af47a65da8CD66729b4209C22017d6A5C2d2400"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Contract"
          }
        }
      }
    },
    "/contracts/{address}/account": {
      "get": {
        "summary": "Contract account",
        "description": "Returns the [Account](#tag/Accounts) resource associated with a given [Contract](#tag/Contracts).",
        "tags": [
          "Contracts"
        ],
        "parameters": [
          {
            "name": "address",
            "description": "Contract hex address.",
            "schema": {
              "type": "string",
              "format": "hex160"
            },
            "in": "path",
            "required": true,
            "example": "0x2af47a65da8CD66729b4209C22017d6A5C2d2400"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Account"
          }
        }
      }
    },
    "/contracts/{address}/token": {
      "get": {
        "summary": "Contract token",
        "description": "Returns the [Token](#tag/Tokens) resource that encapsulates the details of a token (supply, symbol, etc.) managed by the given [Contract](#tag/Contracts), if the contract code is compatible with a supported token standard.",
        "tags": [
          "Contracts"
        ],
        "parameters": [
          {
            "name": "address",
            "description": "Contract hex address.",
            "schema": {
              "type": "string",
              "format": "hex160"
            },
            "in": "path",
            "required": true,
            "example": "0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Token"
          }
        }
      }
    },
    "/contracts/{address}/createdAtBlock": {
      "get": {
        "summary": "Contract creation block",
        "description": "Returns the [Block](#tag/Blocks) resource associated with the block where the [Contract](#tag/Contracts) was created.",
        "tags": [
          "Contracts"
        ],
        "parameters": [
          {
            "name": "address",
            "description": "Contract hex address.",
            "schema": {
              "type": "string",
              "format": "hex160"
            },
            "in": "path",
            "required": true,
            "example": "0x2af47a65da8CD66729b4209C22017d6A5C2d2400"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Block"
          }
        }
      }
    },
    "/contracts/{address}/createdAtTransaction": {
      "get": {
        "summary": "Contract creation transaction",
        "description": "Returns the [Transaction](#tag/Transactions) resource associated with the [Contract](#tag/Contracts) creation.",
        "tags": [
          "Contracts"
        ],
        "parameters": [
          {
            "name": "address",
            "description": "Contract hex address.",
            "schema": {
              "type": "string",
              "format": "hex160"
            },
            "in": "path",
            "required": true,
            "example": "0x2af47a65da8CD66729b4209C22017d6A5C2d2400"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Transaction"
          }
        }
      }
    },
    "/contracts/{address}/createdAtContractMessage": {
      "get": {
        "summary": "Contract creation message",
        "description": "Returns the [ContractMessage](#tag/Contract-Messages) resource that triggered the [Contract](#tag/Contracts) creation.",
        "tags": [
          "Contracts"
        ],
        "parameters": [
          {
            "name": "address",
            "description": "Contract hex address.",
            "schema": {
              "type": "string",
              "format": "hex160"
            },
            "in": "path",
            "required": true,
            "example": "0x2f6392a729b76a6a3056b44e262c70442d26d3c7"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ContractMessage"
          }
        }
      }
    },
    "/contracts/{address}/transactions": {
      "get": {
        "summary": "Contract transactions",
        "description": "Returns the list of [Transaction](#tag/Transactions) resources that were sent to a given [Contract](#tag/Contracts), sorted in reverse chronological order (most recent first).",
        "tags": [
          "Contracts"
        ],
        "parameters": [
          {
            "name": "address",
            "description": "Contract hex address.",
            "schema": {
              "type": "string",
              "format": "hex160"
            },
            "in": "path",
            "required": true,
            "example": "0x2af47a65da8CD66729b4209C22017d6A5C2d2400"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TransactionList"
          }
        }
      }
    },
    "/contracts/{address}/contractMessages": {
      "get": {
        "summary": "Contract messages",
        "description": "Returns the list of [ContractMessage](#tag/Contract-Messages) resources associated with a given Contract, sorted in reverse chronological order (descending by their `globalRank` attribute). Both the contract messages originating from and sent to the contract are included.",
        "tags": [
          "Contracts"
        ],
        "parameters": [
          {
            "name": "address",
            "description": "Contract hex address.",
            "schema": {
              "type": "string",
              "format": "hex160"
            },
            "in": "path",
            "required": true,
            "example": "0x2af47a65da8CD66729b4209C22017d6A5C2d2400"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ContractMessageList"
          }
        }
      }
    },
    "/contracts/{address}/logEntries": {
      "get": {
        "summary": "Contract log entries",
        "description": "Returns the list of [LogEntry](#tag/Log-Entries) resources that were logged by a given [Contract](#tag/Contracts), sorted in reverse chronological order (descending by their `globalRank` attribute).",
        "tags": [
          "Contracts"
        ],
        "parameters": [
          {
            "name": "address",
            "description": "Contract hex address.",
            "schema": {
              "type": "string",
              "format": "hex160"
            },
            "in": "path",
            "required": true,
            "example": "0x2af47a65da8CD66729b4209C22017d6A5C2d2400"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/LogEntryList"
          }
        }
      }
    },
    "/v0/defi/history": {
      "get": {
        "servers": [
          {
            "url": "https://api.aleth.io"
          }
        ],
        "summary": "Historical metrics",
        "description": "Query historical protocol data for multiple protocols, metrics and assets.\n\nThe endpoint will create all possible triples **(protocol, metric, asset)** \nbased on the supplied parameters. It will then exclude the triples for which \nthere is no recorded/available data to export and it will compile a flat list \nof `Snapshot` objects for each of the remaining triples.\n\nA `Series` object is serialised as:\n\n```json\n{\n    \"protocol\": \"maker\",\n    \"metric\": \"borrow_apr\",\n    \"asset\": \"dai\",\n    \"points\": [\n      [123456789, \"8.1234\"],\n      ...\n    ]\n}\n```\n\nThe full response payload will include a list of `Series` objects, and each \n`Series` object will include a list of `Points`. A `Point` is a two element \ntuple, representing the timestamp and the value of each measurement.\n",
        "tags": [
          "DeFi"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Authorization"
          },
          {
            "$ref": "#/components/parameters/Protocols"
          },
          {
            "$ref": "#/components/parameters/Assets"
          },
          {
            "$ref": "#/components/parameters/MetricsEarnBorrow"
          },
          {
            "$ref": "#/components/parameters/DeFiBefore"
          },
          {
            "$ref": "#/components/parameters/DeFiAfter"
          },
          {
            "$ref": "#/components/parameters/Granularity"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/History"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/v0/defi/snapshot": {
      "get": {
        "servers": [
          {
            "url": "https://api.aleth.io"
          }
        ],
        "summary": "Snapshot metrics",
        "description": "Query the current value of the specified metrics for the given protocols and\nassets.\n\nThe endpoint will create all possible triples **(protocol, metric, asset)** \nbased on the supplied parameters. It will then exclude the triples for which \nthere is no recorded/available data to export and it will compile a flat list \nof `Snapshot` objects for each of the remaining triples.\n\nA `Snapshot` object is serialised as:\n\n```json\n{\n    \"protocol\": \"maker\",\n    \"metric\": \"borrow_apr\",\n    \"asset\": \"dai\",\n    \"timestamp\": 123456789,\n    \"value\": \"2.4356\",\n    \"change_24h\": \"-4.2424\"\n}\n```\n\nThe full response payload will include a list of `Snapshot` objects under\nthe `data` property.\n",
        "tags": [
          "DeFi"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Authorization"
          },
          {
            "$ref": "#/components/parameters/Protocols"
          },
          {
            "$ref": "#/components/parameters/Assets"
          },
          {
            "$ref": "#/components/parameters/MetricsEarnBorrow"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Snapshot"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/v0/defi/stats": {
      "get": {
        "servers": [
          {
            "url": "https://api.aleth.io"
          }
        ],
        "summary": "Protocol Stats",
        "description": "Query historical statistics for the given protocols, assets and metrics.\n\nThe endpoint will create all possible (protocol, asset) tuples based on \nthe supplied parameters. It will exclude the tuples for which there is no \nrecorded/available data to export and it will then compile a flat list of \n`Stats` objects for each of the remaining tuples.\n\nA `Stats` object will include, as properties, the protocol, the asset, \nand the full list of metrics supplied as parameters:\n\n```json\n{\n    \"protocol\": \"compound\",\n    \"asset\": \"dai\",\n    \"outstanding_debt\": [\n      [123456789, \"200010.5401\"],\n      ...\n    ],\n    \"collateral_ratio\": [\n      [123456789, \"4.3175\"],\n      ...\n    ],\n    ...\n}\n```\n\nThe full response payload will include a list of `Stats` objects under\nthe `data` property.\n",
        "tags": [
          "DeFi"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Authorization"
          },
          {
            "$ref": "#/components/parameters/Protocols"
          },
          {
            "$ref": "#/components/parameters/Assets"
          },
          {
            "$ref": "#/components/parameters/MetricsStats"
          },
          {
            "$ref": "#/components/parameters/DeFiBefore"
          },
          {
            "$ref": "#/components/parameters/DeFiAfter"
          },
          {
            "$ref": "#/components/parameters/Granularity"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Stats"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/v0/defi/eth-locked": {
      "get": {
        "servers": [
          {
            "url": "https://api.aleth.io"
          }
        ],
        "summary": "Ether Locked",
        "description": "Query the total amount of ETH locked in various protocols.\n\nThe endpoint will export a `EthLocked` object for every protocol supplied\nas part of the `protocols` query parameter. \n\nA `EthLocked` object will include the protocol name and a list of \n`(timestamp, volume)` tuples representing historical snapshots:\n\n```json\n{\n    \"protocol\": \"compound\",\n    \"eth_locked\": [\n      [1557273600, \"15.3002\"],\n      [1557360000, \"25.9002\"]\n      ...\n    ]\n}\n```\n\nThe final response payload will include a list of `EthLocked` objects\nunder the `data` property.\n",
        "tags": [
          "DeFi"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Authorization"
          },
          {
            "$ref": "#/components/parameters/Protocols"
          },
          {
            "$ref": "#/components/parameters/DeFiBefore"
          },
          {
            "$ref": "#/components/parameters/DeFiAfter"
          },
          {
            "$ref": "#/components/parameters/Granularity"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/EthLockedHistory"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/v0/defi/eth-prices": {
      "get": {
        "servers": [
          {
            "url": "https://api.aleth.io"
          }
        ],
        "summary": "Ether USD Prices",
        "description": "Query historical Ether prices, expressed in USD.\n\nThe response payload will include a single-element list under the `data` \nproperty, representing a `PriceHistory` object associated \nwith the evolution of the Ether price in the timeframe specified by the\nquery parameters.\n\nA `PriceHistory` object includes the asset name (in this case `\"eth\"`) \nand a list of `(timestamp, price)` tuples representing historical price\nsnapshots:\n\n```json\n{\n    \"asset\": \"eth\",\n    \"prices\": [\n      [1513641600, \"786.771\"],\n      [1513728000, \"752.3565\"]\n      ...\n    ]\n}\n```\n",
        "tags": [
          "DeFi"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Authorization"
          },
          {
            "$ref": "#/components/parameters/DeFiBefore"
          },
          {
            "$ref": "#/components/parameters/DeFiAfter"
          },
          {
            "$ref": "#/components/parameters/Granularity"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/EthPriceHistory"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/v0/defi/token-prices": {
      "get": {
        "servers": [
          {
            "url": "https://api.aleth.io"
          }
        ],
        "summary": "Token Ether Prices",
        "description": "Query historical Token prices, expressed in ETH. The prices are sourced \nfrom on-chain oracles that are and have been historically used by the\nlending protocols we're supporting.\n\nThe endpoint will export a `PriceHistory` object for every token supplied\nas part of the `assets` query parameter. \n\nA `PriceHistory` object will include the asset name and a list of \n`(timestamp, price)` tuples representing historical price snapshots:\n\n```json\n{\n    \"asset\": \"dai\",\n    \"prices\": [\n      [1581724800, \"0.0035\"],\n      [1581811200, \"0.0038\"]\n      ...\n    ]\n}\n```\n\nThe final response payload will include a list of `PriceHistory` objects\nunder the `data` property.\n",
        "tags": [
          "DeFi"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Authorization"
          },
          {
            "$ref": "#/components/parameters/Assets"
          },
          {
            "$ref": "#/components/parameters/DeFiBefore"
          },
          {
            "$ref": "#/components/parameters/DeFiAfter"
          },
          {
            "$ref": "#/components/parameters/Granularity"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TokenPriceHistory"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/ether-balances/{address}": {
      "get": {
        "summary": "EtherBalance details",
        "description": "Returns the `EtherBalance` resource identified by the given `id`.",
        "tags": [
          "Ether-Balances"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "The EtherBalance identifier.",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true,
            "example": "0x0000000000000000000000000000000000000000"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/EtherBalance"
          }
        }
      }
    },
    "/ether-balances/{address}/account": {
      "get": {
        "summary": "EtherBalance account",
        "description": "Returns the [Account](#tag/Accounts) resource related to the balance object.",
        "tags": [
          "Ether-Balances"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "The EtherBalance identifier.",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true,
            "example": "0x0000000000000000000000000000000000000000"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Account"
          }
        }
      }
    },
    "/ether-balances?filter[account]={address}": {
      "get": {
        "summary": "Filter by account",
        "description": "Returns a single-element list comprised of the `EtherBalance` resource that describes the ether holdings of a given [Account](#tag/Accounts) address.",
        "tags": [
          "Ether-Balances"
        ],
        "parameters": [
          {
            "name": "address",
            "description": "The hex address of the token holder Account.",
            "schema": {
              "type": "string",
              "format": "hex160"
            },
            "in": "query",
            "required": true,
            "example": "0x0000000000000000000000000000000000000000"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/EtherBalanceList"
          }
        }
      }
    },
    "/ether-balances/{address}?block={block}": {
      "get": {
        "summary": "Query at block",
        "description": "Defines the block number at which the balance queries are performed. By default (if unspecified), all queries are performed at the latest block.\nThe possible values for the `block` parameter are:\n- `latest`: returns the token holdings at the latest block\n- `NUMBER`: returns the token holdings after the state transitions were completed at the given block number.\n- `-CONFIRMATIONS`: returns the token holdings with `CONFIRMATIONS` blocks behind the latest block.\nThe `block` parameter can be added along with any filter or combination of filters on a EtherBalance query. ",
        "tags": [
          "Ether-Balances"
        ],
        "parameters": [
          {
            "name": "address",
            "description": "The hex address of the token holder Account.",
            "schema": {
              "type": "string",
              "format": "hex160"
            },
            "in": "query",
            "required": true,
            "example": "0x0000000000000000000000000000000000000000"
          },
          {
            "name": "block",
            "description": "The block at which ether balances are queried.",
            "schema": {
              "type": "string"
            },
            "in": "query",
            "required": false,
            "default": "latest",
            "example": -10
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/EtherBalanceList"
          }
        }
      }
    },
    "/ether-transfers/{id}": {
      "get": {
        "summary": "EtherTransfer details",
        "description": "Returns the [EtherTransfer](#tag/Ether-Transfers) resource identified by the given `id`. \n\nThe `id` is a unique, immutable identifier for the transfer instance - it \ndoesn't have a direct on-chain correspondence and for all practical purposes, \nyou can think of it as a random value that’s useful for relating the transfer \ndetails with other linked data.\n",
        "tags": [
          "Ether-Transfers"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "The EtherTransfer identifier.",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true,
            "example": "0x0079c69c004e00004200f7f0b0a20179"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/EtherTransfer"
          }
        }
      }
    },
    "/ether-transfers/{id}/from": {
      "get": {
        "summary": "EtherTransfer sender",
        "description": "Returns the [Account](#tag/Accounts) resource related to the sender of the transfer.",
        "tags": [
          "Ether-Transfers"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "The EtherTransfer identifier.",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true,
            "example": "0x0079c69c004e00004200f7f0b0a20179"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Account"
          }
        }
      }
    },
    "/ether-transfers/{id}/to": {
      "get": {
        "summary": "EtherTransfer receiver",
        "description": "Returns the [Account](#tag/Accounts) resource related to the recipient of the transfer.",
        "tags": [
          "Ether-Transfers"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "The EtherTransfer identifier.",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true,
            "example": "0x0079c69c004e00004200f7f0b0a20179"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Account"
          }
        }
      }
    },
    "/ether-transfers/{id}/transaction": {
      "get": {
        "summary": "EtherTransfer transaction",
        "description": "Returns the [Transaction](#tag/Transactions) resource that acted as a carrier for a given [EtherTransfer](#tag/Ether-Transfers). Will be `null` for transfers whose carrier is a Block or an Uncle reward.",
        "tags": [
          "Ether-Transfers"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "The EtherTransfer identifier.",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true,
            "example": "0x0079c69c004e00004200f7f0b0a20179"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Transaction"
          }
        }
      }
    },
    "/ether-transfers/{id}/contractMessage": {
      "get": {
        "summary": "EtherTransfer contract message",
        "description": "Returns the [ContractMessage](#tag/Contract-Messages) resource that acted as a carrier for a given [EtherTransfer](#tag/Ether-Transfers). Can be `null` if the [EtherTransfer](#tag/Ether-Transfers) carrier is not a [ContractMessage](#tag/Contract-Messages).",
        "tags": [
          "Ether-Transfers"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "The EtherTransfer identifier.",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true,
            "example": "0x0079c69c004e00004200f7f0b0a20179"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ContractMessage"
          }
        }
      }
    },
    "/ether-transfers/{id}/block": {
      "get": {
        "summary": "EtherTransfer block",
        "description": "Returns the [Block](#tag/Blocks) resource that corresponds to the block where the transfer was triggered.",
        "tags": [
          "Ether-Transfers"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "The EtherTransfer identifier.",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true,
            "example": "0x0079c69c004e00004200f7f0b0a20179"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Block"
          }
        }
      }
    },
    "/ether-transfers/{id}/feeRecipient": {
      "get": {
        "summary": "EtherTransfer fee recipient",
        "description": "Returns the [Account](#tag/Accounts) resource that corresponds to the miner (beneficiary) of the [Block](#tag/Blocks) where the transfer was triggered.",
        "tags": [
          "Ether-Transfers"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "The EtherTransfer identifier.",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true,
            "example": "0x0079c69c004e00004200f7f0b0a20179"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Account"
          }
        }
      }
    },
    "/ether-transfers?filter[account]={address}": {
      "get": {
        "summary": "Filter by account",
        "description": "Returns the list of [EtherTransfer](#tag/Ether-Transfers) resources that were either sent to or received by a given [Account](#tag/Accounts) address, sorted in reverse chronological order (most recent first).",
        "tags": [
          "Ether-Transfers"
        ],
        "parameters": [
          {
            "name": "address",
            "description": "The hex address of the Account.",
            "schema": {
              "type": "string",
              "format": "hex160"
            },
            "in": "query",
            "required": true,
            "example": "0x50126e8fcb9be29f83c6bbd913cc85b40eaf86fc"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/EtherTransferList"
          }
        }
      }
    },
    "/log-entries/{id}": {
      "get": {
        "summary": "LogEntry details",
        "description": "Returns the [LogEntry](#tag/Log-Entries) resource identified by the given id.",
        "tags": [
          "Log-Entries"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "The LogEntry ID.",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true,
            "example": "log:0xd70ae3e306514044032fce92bd36a36b90aede20bb119b32672287d28debf5ef:0"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/LogEntry"
          }
        }
      }
    },
    "/log-entries/{id}/loggedBy": {
      "get": {
        "summary": "LogEntry contract",
        "description": "Returns the [Contract](#tag/Contracts) resource that logged the given [LogEntry](#tag/Log-Entries).",
        "tags": [
          "Log-Entries"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "The LogEntry ID.",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true,
            "example": "log:0xd70ae3e306514044032fce92bd36a36b90aede20bb119b32672287d28debf5ef:0"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Contract"
          }
        }
      }
    },
    "/log-entries/{id}/block": {
      "get": {
        "summary": "LogEntry block",
        "description": "Returns the [Block](#tag/Blocks) resource representing the canonical block where the [LogEntry](#tag/Log-Entries) was generated.",
        "tags": [
          "Log-Entries"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "The LogEntry ID.",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true,
            "example": "log:0xd70ae3e306514044032fce92bd36a36b90aede20bb119b32672287d28debf5ef:0"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Block"
          }
        }
      }
    },
    "/log-entries/{id}/transaction": {
      "get": {
        "summary": "LogEntry transaction",
        "description": "Returns the [Transaction](#tag/Transactions) resource that triggered the creation of a given [LogEntry](#tag/Log-Entries).",
        "tags": [
          "Log-Entries"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "The ContractMessage ID.",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true,
            "example": "log:0xd70ae3e306514044032fce92bd36a36b90aede20bb119b32672287d28debf5ef:0"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Transaction"
          }
        }
      }
    },
    "/log-entries/{id}/contractMessage": {
      "get": {
        "summary": "LogEntry contract message",
        "description": "Returns the [ContractMessage](#tag/Contract-Messages) resource that triggered the creation of a given [LogEntry](#tag/Log-Entries). Can be `null` if the [LogEntry](#tag/Log-Entries) was triggered by a transaction call directly.",
        "tags": [
          "Log-Entries"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "The LogEntry ID.",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true,
            "example": "log:0xd70ae3e306514044032fce92bd36a36b90aede20bb119b32672287d28debf5ef:0"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ContractMessage"
          }
        }
      }
    },
    "/log-entries?filter[loggedBy]={address}": {
      "get": {
        "summary": "Filter by contract",
        "description": "Returns the [LogEntry](#tag/Log-Entries) resources that were logged by the given [Contract](#tag/Contracts) address.",
        "tags": [
          "Log-Entries"
        ],
        "parameters": [
          {
            "name": "address",
            "description": "The hex address of the Contract.",
            "schema": {
              "type": "string",
              "format": "hex160"
            },
            "in": "query",
            "required": true,
            "example": "0x174bfa6600bf90c885c7c01c7031389ed1461ab9"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/LogEntryList"
          }
        }
      }
    },
    "/log-entries?filter[hasLogTopics.0]={value}": {
      "get": {
        "summary": "Filter by topic[0]",
        "description": "Returns the [LogEntry](#tag/Log-Entries) resources whose `topic[0]` have the given value.",
        "tags": [
          "Log-Entries"
        ],
        "parameters": [
          {
            "name": "value",
            "description": "The 256-bit hex value of `topic0`.",
            "schema": {
              "type": "string",
              "format": "hex256"
            },
            "in": "query",
            "required": true,
            "example": "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/LogEntryList"
          }
        }
      }
    },
    "/log-entries?filter[hasLogTopics.1]={value}": {
      "get": {
        "summary": "Filter by topic[1]",
        "description": "Returns the [LogEntry](#tag/Log-Entries) resources whose `topic[1]` have the given value.",
        "tags": [
          "Log-Entries"
        ],
        "parameters": [
          {
            "name": "value",
            "description": "The 256-bit hex value of `topic[1]`.",
            "schema": {
              "type": "string",
              "format": "hex256"
            },
            "in": "query",
            "required": true,
            "example": "0x000000000000000000000000ed7fd84fb31577e59ce476f51754c3e2256c542c"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/LogEntryList"
          }
        }
      }
    },
    "/log-entries?filter[hasLogTopics.2]={value}": {
      "get": {
        "summary": "Filter by topic[2]",
        "description": "Returns the [LogEntry](#tag/Log-Entries) resources whose `topic[2]` have the given value.",
        "tags": [
          "Log-Entries"
        ],
        "parameters": [
          {
            "name": "value",
            "description": "The 256-bit hex value of `topic[2]`.",
            "schema": {
              "type": "string",
              "format": "hex256"
            },
            "in": "query",
            "required": true,
            "example": "0x000000000000000000000000f802ccd600eeae4f6b3bd265525e80f50da8ba5b"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/LogEntryList"
          }
        }
      }
    },
    "/log-entries?filter[hasLogTopics.3]={value}": {
      "get": {
        "summary": "Filter by topic[3]",
        "description": "Returns the [LogEntry](#tag/Log-Entries) resources whose `topic[3]` have the given value.",
        "tags": [
          "Log-Entries"
        ],
        "parameters": [
          {
            "name": "value",
            "description": "The 256-bit hex value of `topic[3]`.",
            "schema": {
              "type": "string",
              "format": "hex256"
            },
            "in": "query",
            "required": true,
            "example": "0x000000000000000000000000d91946e6b38c1b6404c5304eeee54bb191a662b6"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/LogEntryList"
          }
        }
      }
    },
    "/log-entries?filter[hasLogTopics]={value}": {
      "get": {
        "summary": "Filter by any topic",
        "description": "Returns the [LogEntry](#tag/Log-Entries) resources that have at least one topic (`topic[0]`, `topic[1]`, `topic[2]`, `topic[3]`) with the given value.",
        "tags": [
          "Log-Entries"
        ],
        "parameters": [
          {
            "name": "value",
            "description": "The 256-bit hex lookup value.",
            "schema": {
              "type": "string",
              "format": "hex256"
            },
            "in": "query",
            "required": true,
            "example": "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/LogEntryList"
          }
        }
      }
    },
    "/token-balances/{id}": {
      "get": {
        "summary": "TokenBalance details",
        "description": "Returns the `TokenBalance` resource identified by the given `id`.",
        "tags": [
          "Token-Balances"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "The TokenBalance identifier.",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true,
            "example": "0x000000000000000000000000000000000000000057ab1e02fee23774580c119740129eac7081e9d3"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TokenBalance"
          }
        }
      }
    },
    "/token-balances/{id}/token": {
      "get": {
        "summary": "TokenBalance token",
        "description": "Returns the details of the [Token](#tag/Tokens) resource related to the balance object.",
        "tags": [
          "Token-Balances"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "The TokenBalance identifier.",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true,
            "example": "0x000000000000000000000000000000000000000057ab1e02fee23774580c119740129eac7081e9d3"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Token"
          }
        }
      }
    },
    "/token-balances/{id}/account": {
      "get": {
        "summary": "TokenBalance account",
        "description": "Returns the [Account](#tag/Accounts) resource related to the balance object.",
        "tags": [
          "Token-Balances"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "The TokenBalance identifier.",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true,
            "example": "0x000000000000000000000000000000000000000057ab1e02fee23774580c119740129eac7081e9d3"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Account"
          }
        }
      }
    },
    "/token-balances?filter[account]={address}": {
      "get": {
        "summary": "Filter by account",
        "description": "Returns the list of `TokenBalance` resources that correspond to the token holdings of a given [Account](#tag/Accounts) address, sorted in alphabetical order by the [Token](#tag/Tokens) address.",
        "tags": [
          "Token-Balances"
        ],
        "parameters": [
          {
            "name": "address",
            "description": "The hex address of the token holder Account.",
            "schema": {
              "type": "string",
              "format": "hex160"
            },
            "in": "query",
            "required": true,
            "example": "0x0000000000000000000000000000000000000000"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TokenBalanceList"
          }
        }
      }
    },
    "/token-balances?filter[account]={address}&filter[token]={token}": {
      "get": {
        "summary": "Filter by account and token",
        "description": "Returns the `TokenBalance` resource that correspond to the token holdings of a given [Account](#tag/Accounts) address for a given [Token](#tag/Tokens) contract, formatted as a single-element list.",
        "tags": [
          "Token-Balances"
        ],
        "parameters": [
          {
            "name": "address",
            "description": "The hex address of the token holder Account.",
            "schema": {
              "type": "string",
              "format": "hex160"
            },
            "in": "query",
            "required": true,
            "example": "0x0000000000000000000000000000000000000000"
          },
          {
            "name": "token",
            "description": "The hex address of the token contract.",
            "schema": {
              "type": "string",
              "format": "hex160"
            },
            "in": "query",
            "required": false,
            "example": "0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TokenBalanceList"
          }
        }
      }
    },
    "/token-balances?block={block}&filter[account]={address}": {
      "get": {
        "summary": "Query at block",
        "description": "Defines the block number at which the balance queries are performed. By default (if unspecified), all queries are performed at the latest block.\nThe possible values for the `block` parameter are:\n- `latest`: returns the token holdings at the latest block\n- `NUMBER`: returns the token holdings after the state transitions were completed at the given block number.\n- `-CONFIRMATIONS`: returns the token holdings with `CONFIRMATIONS` blocks behind the latest block.\nThe `block` parameter can be added along with any filter or combination of filters on a TokenBalance query. ",
        "tags": [
          "Token-Balances"
        ],
        "parameters": [
          {
            "name": "address",
            "description": "The hex address of the token holder Account.",
            "schema": {
              "type": "string",
              "format": "hex160"
            },
            "in": "query",
            "required": true,
            "example": "0x0000000000000000000000000000000000000000"
          },
          {
            "name": "block",
            "description": "The block at which token balances are queried.",
            "schema": {
              "type": "string"
            },
            "in": "query",
            "required": false,
            "default": "latest",
            "example": -10
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TokenBalanceList"
          }
        }
      }
    },
    "/token-transfers/{id}": {
      "get": {
        "summary": "TokenTransfer details",
        "description": "Returns the [TokenTransfer](#tag/Token-Transfers) resource identified by the given `id`.",
        "tags": [
          "Token-Transfers"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "The TokenTransfer identifier.",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true,
            "example": "0x0078afae00f600028101320161a91f42"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TokenTransfer"
          }
        }
      }
    },
    "/token-transfers/{id}/token": {
      "get": {
        "summary": "TokenTransfer token",
        "description": "Returns the details of the [Token](#tag/Tokens) resource related to the transfer.",
        "tags": [
          "Token-Transfers"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "The TokenTransfer identifier.",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true,
            "example": "0x0078afae00f600028101320161a91f42"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Token"
          }
        }
      }
    },
    "/token-transfers/{id}/from": {
      "get": {
        "summary": "TokenTransfer sender",
        "description": "Returns the [Account](#tag/Accounts) resource related to the sender of the transfer.",
        "tags": [
          "Token-Transfers"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "The TokenTransfer identifier.",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true,
            "example": "0x0078afae00f600028101320161a91f42"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Account"
          }
        }
      }
    },
    "/token-transfers/{id}/to": {
      "get": {
        "summary": "TokenTransfer receiver",
        "description": "Returns the [Account](#tag/Accounts) resource related to the recipient of the transfer.",
        "tags": [
          "Token-Transfers"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "The TokenTransfer identifier.",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true,
            "example": "0x0078afae00f600028101320161a91f42"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Account"
          }
        }
      }
    },
    "/token-transfers/{id}/transaction": {
      "get": {
        "summary": "TokenTransfer transaction",
        "description": "Returns the [Transaction](#tag/Transactions) resource that triggered the creation of a given [TokenTransfer](#tag/Token-Transfers).",
        "tags": [
          "Token-Transfers"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "The TokenTransfer identifier.",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true,
            "example": "0x0078afae00f600028101320161a91f42"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Transaction"
          }
        }
      }
    },
    "/token-transfers/{id}/contractMessage": {
      "get": {
        "summary": "TokenTransfer contract message",
        "description": "Returns the [ContractMessage](#tag/Contract-Messages) resource that triggered the creation of a given [TokenTransfer](#tag/Token-Transfers). Can be `null` if the [TokenTransfer](#tag/Token-Transfers) was created directly by a transaction call.",
        "tags": [
          "Token-Transfers"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "The TokenTransfer identifier.",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true,
            "example": "0x0078afae00f600028101320161a91f42"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ContractMessage"
          }
        }
      }
    },
    "/token-transfers/{id}/logEntry": {
      "get": {
        "summary": "TokenTransfer log entry",
        "description": "Returns the [LogEntry](#tag/Log-Entries) resource that logged a given [TokenTransfer](#tag/Token-Transfers).",
        "tags": [
          "Token-Transfers"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "The TokenTransfer identifier.",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true,
            "example": "0x0078afae00f600028101320161a91f42"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/LogEntry"
          }
        }
      }
    },
    "/token-transfers/{id}/originator": {
      "get": {
        "summary": "TokenTransfer originator",
        "description": "Returns the [Account](#tag/Accounts) resource representing the sender of the [Transaction](#tag/Transactions) that triggered a given [TokenTransfer](#tag/Token-Transfers). This can be different than the `from` (sender) of the [TokenTransfer](#tag/Token-Transfers).",
        "tags": [
          "Token-Transfers"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "The TokenTransfer identifier.",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true,
            "example": "0x0078afae00f600028101320161a91f42"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Account"
          }
        }
      }
    },
    "/token-transfers?filter[from]={address}": {
      "get": {
        "summary": "Filter by sender",
        "description": "Returns the list of [TokenTransfer](#tag/Token-Transfers) resources that were sent by a given [Account](#tag/Accounts) address, sorted in reverse chronological order (most recent first).",
        "tags": [
          "Token-Transfers"
        ],
        "parameters": [
          {
            "name": "address",
            "description": "The hex address of the sending Account.",
            "schema": {
              "type": "string",
              "format": "hex160"
            },
            "in": "query",
            "required": true,
            "example": "0x0000000000000000000000000000000000000000"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TokenTransferList"
          }
        }
      }
    },
    "/token-transfers?filter[to]={address}": {
      "get": {
        "summary": "Filter by destination",
        "description": "Returns the list of [TokenTransfer](#tag/Token-Transfers) resources received by a given [Account](#tag/Accounts) address, sorted in reverse chronological order (most recent first).",
        "tags": [
          "Token-Transfers"
        ],
        "parameters": [
          {
            "name": "address",
            "description": "The hex address of the destination Account.",
            "schema": {
              "type": "string",
              "format": "hex160"
            },
            "in": "query",
            "required": true,
            "example": "0x0000000000000000000000000000000000000000"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TokenTransferList"
          }
        }
      }
    },
    "/token-transfers?filter[account]={address}": {
      "get": {
        "summary": "Filter by account",
        "description": "Returns the list of [TokenTransfer](#tag/Token-Transfers) resources that were either sent to or received by a given [Account](#tag/Accounts) address, sorted in reverse chronological order (most recent first).",
        "tags": [
          "Token-Transfers"
        ],
        "parameters": [
          {
            "name": "address",
            "description": "The hex address of the Account.",
            "schema": {
              "type": "string",
              "format": "hex160"
            },
            "in": "query",
            "required": true,
            "example": "0x0000000000000000000000000000000000000000"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TokenTransferList"
          }
        }
      }
    },
    "/token-transfers?filter[token]={address}": {
      "get": {
        "summary": "Filter by token",
        "description": "Returns the list of [TokenTransfer](#tag/Token-Transfers) resources denominated in a given [Token](#tag/Tokens) contract address, sorted in reverse chronological order (most recent first).",
        "tags": [
          "Token-Transfers"
        ],
        "parameters": [
          {
            "name": "address",
            "description": "The hex address of the Token contract.",
            "schema": {
              "type": "string",
              "format": "hex160"
            },
            "in": "query",
            "required": true,
            "example": "0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TokenTransferList"
          }
        }
      }
    },
    "/tokens/{address}": {
      "get": {
        "summary": "Token details",
        "description": "Returns the [Token](#tag/Tokens) resource linked to a given token contract address.",
        "tags": [
          "Tokens"
        ],
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "required": true,
            "description": "The hex address of the Token contract.",
            "schema": {
              "type": "string",
              "format": "hex160"
            },
            "example": "0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Token"
          }
        }
      }
    },
    "/tokens/{address}/contract": {
      "get": {
        "summary": "Token contract",
        "description": "Returns the [Contract](#tag/Contracts) resource associated with a given [Token](#tag/Tokens). This can be useful for retrieving lower-level activity or details related to the underlying token contract (creation details, message history, log entries, bytecode, etc.)",
        "tags": [
          "Tokens"
        ],
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "required": true,
            "description": "The hex address of the Token contract.",
            "schema": {
              "type": "string",
              "format": "hex160"
            },
            "example": "0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Contract"
          }
        }
      }
    },
    "/tokens/{address}/tokenTransfers": {
      "get": {
        "summary": "Token transfers",
        "description": "Returns the list of [TokenTransfer](#tag/Token-Transfers) resources denominated in a given [Token](#tag/Tokens), sorted in reverse chronological order (most recent first).",
        "tags": [
          "Tokens"
        ],
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "required": true,
            "description": "The hex address of the Token contract.",
            "schema": {
              "type": "string",
              "format": "hex160"
            },
            "example": "0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TokenTransferList"
          }
        }
      }
    },
    "/tokens/{address}/tags/truset": {
      "get": {
        "summary": "Token reference metadata",
        "description": "Returns reference [Token](#tag/Tokens) metadata sourced via [TruSet](https://truset.com).",
        "tags": [
          "Tokens"
        ],
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "required": true,
            "description": "The hex address of the Token contract.",
            "schema": {
              "type": "string",
              "format": "hex160"
            },
            "example": "0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TrusetTag"
          }
        }
      }
    },
    "/transactions/{txHash}": {
      "get": {
        "summary": "Transaction details",
        "description": "Returns the [Transaction](#tag/Transactions) resource identified by the given hash.",
        "tags": [
          "Transactions"
        ],
        "parameters": [
          {
            "name": "txHash",
            "description": "Transaction hash.",
            "schema": {
              "type": "string",
              "format": "hex256"
            },
            "in": "path",
            "required": true,
            "example": "0x9ed4aff20ae7c029affc78c3467cc4950922bd3d0e925ea6e097cb2f7e8ccf85"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Transaction"
          }
        }
      }
    },
    "/transactions/{txHash}/from": {
      "get": {
        "summary": "Transaction sender",
        "description": "Returns the [Account](#tag/Accounts) resource representing the sender (`from` field) of a given [Transaction](#tag/Transactions).",
        "tags": [
          "Transactions"
        ],
        "parameters": [
          {
            "name": "txHash",
            "description": "Transaction hash.",
            "schema": {
              "type": "string",
              "format": "hex256"
            },
            "in": "path",
            "required": true,
            "example": "0x9ed4aff20ae7c029affc78c3467cc4950922bd3d0e925ea6e097cb2f7e8ccf85"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Account"
          }
        }
      }
    },
    "/transactions/{txHash}/to": {
      "get": {
        "summary": "Transaction destination",
        "description": "Returns the [Account](#tag/Accounts) resource representing the destinaton (`to` field) of given [Transaction](#tag/Transactions).",
        "tags": [
          "Transactions"
        ],
        "parameters": [
          {
            "name": "txHash",
            "description": "Transaction hash.",
            "schema": {
              "type": "string",
              "format": "hex256"
            },
            "in": "path",
            "required": true,
            "example": "0x9ed4aff20ae7c029affc78c3467cc4950922bd3d0e925ea6e097cb2f7e8ccf85"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Account"
          }
        }
      }
    },
    "/transactions/{txHash}/includedInBlock": {
      "get": {
        "summary": "Transaction block",
        "description": "Returns the [Block](#tag/Blocks) resource representing the canonical block where the [Transaction](#tag/Transactions) was included.",
        "tags": [
          "Transactions"
        ],
        "parameters": [
          {
            "name": "txHash",
            "description": "Transaction hash.",
            "schema": {
              "type": "string",
              "format": "hex256"
            },
            "in": "path",
            "required": true,
            "example": "0x9ed4aff20ae7c029affc78c3467cc4950922bd3d0e925ea6e097cb2f7e8ccf85"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Block"
          }
        }
      }
    },
    "/transactions/{txHash}/createsContracts": {
      "get": {
        "summary": "Transaction created contracts",
        "description": "Returns the list of [Contract](#tag/Contracts) resources that were created as a result of executing the [Transaction](#tag/Transactions) (and all its descendant [ContractMessage](#tag/Contract-Messages) resources).",
        "tags": [
          "Transactions"
        ],
        "parameters": [
          {
            "name": "txHash",
            "description": "Transaction hash.",
            "schema": {
              "type": "string",
              "format": "hex256"
            },
            "in": "path",
            "required": true,
            "example": "0x9ed4aff20ae7c029affc78c3467cc4950922bd3d0e925ea6e097cb2f7e8ccf85"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ContractList"
          }
        }
      }
    },
    "/transactions/{txHash}/contractMessages": {
      "get": {
        "summary": "Transaction contract messages",
        "description": "Returns the list of all [ContractMessage](#tag/Contract-Messages) resources that were triggered as a result of executing the given [Transaction](#tag/Transactions).",
        "tags": [
          "Transactions"
        ],
        "parameters": [
          {
            "name": "txHash",
            "description": "Transaction hash.",
            "schema": {
              "type": "string",
              "format": "hex256"
            },
            "in": "path",
            "required": true,
            "example": "0x9ed4aff20ae7c029affc78c3467cc4950922bd3d0e925ea6e097cb2f7e8ccf85"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ContractMessageList"
          }
        }
      }
    },
    "/transactions/{txHash}/logEntries": {
      "get": {
        "summary": "Transaction log entries",
        "description": "Returns the list of all [LogEntry](#tag/Log-Entries) resources that were created as a result of executing the given transaction.",
        "tags": [
          "Transactions"
        ],
        "parameters": [
          {
            "name": "txHash",
            "description": "Transaction hash.",
            "schema": {
              "type": "string",
              "format": "hex256"
            },
            "in": "path",
            "required": true,
            "example": "0x9ed4aff20ae7c029affc78c3467cc4950922bd3d0e925ea6e097cb2f7e8ccf85"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/LogEntryList"
          }
        }
      }
    },
    "/transactions/{txHash}/tokenTransfers": {
      "get": {
        "summary": "Transaction token transfers",
        "description": "Returns the list of all [TokenTransfer](#tag/Token-Transfers) resources that were created as a result of executing the given [Transaction](#tag/Transactions).",
        "tags": [
          "Transactions"
        ],
        "parameters": [
          {
            "name": "txHash",
            "description": "Transaction hash.",
            "schema": {
              "type": "string",
              "format": "hex256"
            },
            "in": "path",
            "required": true,
            "example": "0x9ed4aff20ae7c029affc78c3467cc4950922bd3d0e925ea6e097cb2f7e8ccf85"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TokenTransferList"
          }
        }
      }
    },
    "/transactions?filter[from]={address}": {
      "get": {
        "summary": "Filter by sender",
        "description": "Returns the list of [Transaction](#tag/Transactions) resources that were sent by a given [Account](#tag/Accounts) address, sorted in reverse chronological order (most recent first).",
        "tags": [
          "Transactions"
        ],
        "parameters": [
          {
            "name": "address",
            "description": "The hex address of the originator Account.",
            "schema": {
              "type": "string",
              "format": "hex160"
            },
            "in": "query",
            "required": true,
            "example": "0x50126e8fcb9be29f83c6bbd913cc85b40eaf86fc"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TransactionList"
          }
        }
      }
    },
    "/transactions?filter[to]={address}": {
      "get": {
        "summary": "Filter by destination",
        "description": "Returns the list of [Transaction](#tag/Transactions) resources received by a given [Account](#tag/Accounts) address, sorted in reverse chronological order (most recent first).",
        "tags": [
          "Transactions"
        ],
        "parameters": [
          {
            "name": "address",
            "description": "The hex address of the destination Account.",
            "schema": {
              "type": "string",
              "format": "hex160"
            },
            "in": "query",
            "required": true,
            "example": "0x50126e8fcb9be29f83c6bbd913cc85b40eaf86fc"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TransactionList"
          }
        }
      }
    },
    "/transactions?filter[account]={address}": {
      "get": {
        "summary": "Filter by account",
        "description": "Returns the list of [Transaction](#tag/Transactions) resources that were either sent to or received by a given [Account](#tag/Accounts) address, sorted in reverse chronological order (most recent first).",
        "tags": [
          "Transactions"
        ],
        "parameters": [
          {
            "name": "address",
            "description": "The hex address of the Account.",
            "schema": {
              "type": "string",
              "format": "hex160"
            },
            "in": "query",
            "required": true,
            "example": "0x50126e8fcb9be29f83c6bbd913cc85b40eaf86fc"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TransactionList"
          }
        }
      }
    },
    "/transactions?filter[msgType]={type}": {
      "get": {
        "summary": "Filter by type",
        "description": "Returns the list of [Transaction](#tag/Transactions) resources filtered by their message type, sorted in reverse chronological order (most recent first).",
        "tags": [
          "Transactions"
        ],
        "parameters": [
          {
            "name": "type",
            "description": "The type of the Transaction.",
            "schema": {
              "type": "string",
              "enum": [
                "ValueTx",
                "CallTx",
                "CreateTx"
              ]
            },
            "in": "query",
            "required": true,
            "example": "ValueTx"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TransactionList"
          }
        }
      }
    },
    "/webhooks": {
      "post": {
        "summary": "Create new webhook",
        "description": "Creates a new Webhook with the given attributes.\n\nThe `target` URL will be pinged at the time of Webhook creation via a POST request\nwith the following request body:\n\n```json\n{\n  \"data\": [],\n  \"meta\": {\n    \"webhook\": {\n      \"type\": \"Webhook\",\n      \"id\": \"006cfb85008d000010008ca21f438ee5\",\n      \"links\": {\n        \"self\": \"https://api.aleth.io/v1/webhooks/006cfb85008d000010008ca21f438ee5\"\n      }\n    }\n  }\n}\n```\n\nThe webhook creation will only succeed if the response of the remote target has a `200` status.\nOtherwise, it will fail with a `424` (Failed Dependency) error.\n",
        "tags": [
          "Webhooks"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Authorization"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/WebhookCreateRequest"
                  }
                }
              }
            }
          }
        },
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/WebhookDetails"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "424": {
            "$ref": "#/components/responses/FailedDependency"
          }
        }
      },
      "get": {
        "summary": "List all webhooks",
        "description": "Returns a paginated list of all Webhook resources.",
        "tags": [
          "Webhooks"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Authorization"
          },
          {
            "$ref": "#/components/parameters/PageLimit"
          },
          {
            "$ref": "#/components/parameters/PageNext"
          },
          {
            "$ref": "#/components/parameters/PagePrev"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/WebhookList"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/webhooks/{id}": {
      "get": {
        "summary": "Get webhook details",
        "description": "Returns the details of a Webhook resource, identified by a given `id`.",
        "tags": [
          "Webhooks"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Authorization"
          }
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/WebhookDetails"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "delete": {
        "summary": "Delete webhook",
        "description": "Deletes the webhook instance indentified by `id`.",
        "tags": [
          "Webhooks"
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Empty"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/webhooks/{id}/pause": {
      "post": {
        "summary": "Pause webhook",
        "description": "Pauses the webhook identified by a given `id`.\nIf the pause is successful, the webhook `status` should be changed to\n`PAUSED_BY_USER`.\n",
        "tags": [
          "Webhooks"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Authorization"
          }
        ],
        "requestBody": {
          "required": false
        },
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/WebhookDetails"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/webhooks/{id}/resume": {
      "post": {
        "summary": "Resume webhook",
        "description": "Resumes the webhook identified by a given `id`.\nIf the resume is successful, the webhook `status` should be changed to\n`RESUMED_BY_USER`.\n",
        "tags": [
          "Webhooks"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Authorization"
          }
        ],
        "requestBody": {
          "required": false
        },
        "produces": [
          "application/vnd.api+json"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/WebhookDetails"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        }
      }
    }
  }
}